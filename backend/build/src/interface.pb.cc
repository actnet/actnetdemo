// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: interface.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "interface.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace demoserver {

namespace {

const ::google::protobuf::Descriptor* EntitySearchRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EntitySearchRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* EntityDetailRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EntityDetailRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Stat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stat_reflection_ = NULL;
const ::google::protobuf::Descriptor* RelatedEntity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RelatedEntity_reflection_ = NULL;
const ::google::protobuf::Descriptor* DetailedEntity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetailedEntity_reflection_ = NULL;
const ::google::protobuf::Descriptor* EntitySearchResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EntitySearchResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Influence_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Influence_reflection_ = NULL;
const ::google::protobuf::Descriptor* InfluenceSearchResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InfluenceSearchResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityPOI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityPOI_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityNext_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityNext_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityEntity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityEntity_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivitySimilar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivitySimilar_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityCity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityCity_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityWeibo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityWeibo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityCenterList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityCenterList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivitySearchRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivitySearchRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivitySearchResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivitySearchResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_interface_2eproto() {
  protobuf_AddDesc_interface_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "interface.proto");
  GOOGLE_CHECK(file != NULL);
  EntitySearchRequest_descriptor_ = file->message_type(0);
  static const int EntitySearchRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntitySearchRequest, dataset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntitySearchRequest, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntitySearchRequest, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntitySearchRequest, count_),
  };
  EntitySearchRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EntitySearchRequest_descriptor_,
      EntitySearchRequest::default_instance_,
      EntitySearchRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntitySearchRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntitySearchRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EntitySearchRequest));
  EntityDetailRequest_descriptor_ = file->message_type(1);
  static const int EntityDetailRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityDetailRequest, dataset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityDetailRequest, id_),
  };
  EntityDetailRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EntityDetailRequest_descriptor_,
      EntityDetailRequest::default_instance_,
      EntityDetailRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityDetailRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityDetailRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EntityDetailRequest));
  Stat_descriptor_ = file->message_type(2);
  static const int Stat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, value_),
  };
  Stat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Stat_descriptor_,
      Stat::default_instance_,
      Stat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Stat));
  RelatedEntity_descriptor_ = file->message_type(3);
  static const int RelatedEntity_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelatedEntity, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelatedEntity, id_),
  };
  RelatedEntity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RelatedEntity_descriptor_,
      RelatedEntity::default_instance_,
      RelatedEntity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelatedEntity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelatedEntity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RelatedEntity));
  DetailedEntity_descriptor_ = file->message_type(4);
  static const int DetailedEntity_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailedEntity, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailedEntity, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailedEntity, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailedEntity, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailedEntity, stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailedEntity, topics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailedEntity, imgurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailedEntity, original_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailedEntity, related_entity_),
  };
  DetailedEntity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DetailedEntity_descriptor_,
      DetailedEntity::default_instance_,
      DetailedEntity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailedEntity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailedEntity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DetailedEntity));
  EntitySearchResponse_descriptor_ = file->message_type(5);
  static const int EntitySearchResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntitySearchResponse, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntitySearchResponse, total_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntitySearchResponse, entity_),
  };
  EntitySearchResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EntitySearchResponse_descriptor_,
      EntitySearchResponse::default_instance_,
      EntitySearchResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntitySearchResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntitySearchResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EntitySearchResponse));
  Influence_descriptor_ = file->message_type(6);
  static const int Influence_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Influence, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Influence, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Influence, score_),
  };
  Influence_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Influence_descriptor_,
      Influence::default_instance_,
      Influence_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Influence, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Influence, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Influence));
  InfluenceSearchResponse_descriptor_ = file->message_type(7);
  static const int InfluenceSearchResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfluenceSearchResponse, entity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfluenceSearchResponse, influence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfluenceSearchResponse, influenced_by_),
  };
  InfluenceSearchResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InfluenceSearchResponse_descriptor_,
      InfluenceSearchResponse::default_instance_,
      InfluenceSearchResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfluenceSearchResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfluenceSearchResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InfluenceSearchResponse));
  ActivityPoint_descriptor_ = file->message_type(8);
  static const int ActivityPoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityPoint, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityPoint, lng_),
  };
  ActivityPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityPoint_descriptor_,
      ActivityPoint::default_instance_,
      ActivityPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityPoint));
  ActivityPOI_descriptor_ = file->message_type(9);
  static const int ActivityPOI_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityPOI, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityPOI, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityPOI, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityPOI, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityPOI, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityPOI, lng_),
  };
  ActivityPOI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityPOI_descriptor_,
      ActivityPOI::default_instance_,
      ActivityPOI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityPOI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityPOI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityPOI));
  ActivityNext_descriptor_ = file->message_type(10);
  static const int ActivityNext_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityNext, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityNext, duration_),
  };
  ActivityNext_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityNext_descriptor_,
      ActivityNext::default_instance_,
      ActivityNext_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityNext, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityNext, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityNext));
  ActivityEntity_descriptor_ = file->message_type(11);
  static const int ActivityEntity_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEntity, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEntity, verb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEntity, object_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEntity, wordvector_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEntity, points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEntity, pois_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEntity, timestamps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEntity, nextpoints_),
  };
  ActivityEntity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityEntity_descriptor_,
      ActivityEntity::default_instance_,
      ActivityEntity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEntity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityEntity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityEntity));
  ActivitySimilar_descriptor_ = file->message_type(12);
  static const int ActivitySimilar_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivitySimilar, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivitySimilar, sim_),
  };
  ActivitySimilar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivitySimilar_descriptor_,
      ActivitySimilar::default_instance_,
      ActivitySimilar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivitySimilar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivitySimilar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivitySimilar));
  ActivityCity_descriptor_ = file->message_type(13);
  static const int ActivityCity_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityCity, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityCity, activity_),
  };
  ActivityCity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityCity_descriptor_,
      ActivityCity::default_instance_,
      ActivityCity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityCity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityCity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityCity));
  ActivityUser_descriptor_ = file->message_type(14);
  static const int ActivityUser_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityUser, ids_),
  };
  ActivityUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityUser_descriptor_,
      ActivityUser::default_instance_,
      ActivityUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityUser));
  ActivityWeibo_descriptor_ = file->message_type(15);
  static const int ActivityWeibo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityWeibo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityWeibo, weibo_),
  };
  ActivityWeibo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityWeibo_descriptor_,
      ActivityWeibo::default_instance_,
      ActivityWeibo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityWeibo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityWeibo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityWeibo));
  ActivityCenterList_descriptor_ = file->message_type(16);
  static const int ActivityCenterList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityCenterList, activities_),
  };
  ActivityCenterList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityCenterList_descriptor_,
      ActivityCenterList::default_instance_,
      ActivityCenterList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityCenterList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityCenterList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityCenterList));
  ActivityList_descriptor_ = file->message_type(17);
  static const int ActivityList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityList, sen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityList, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityList, lng_),
  };
  ActivityList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityList_descriptor_,
      ActivityList::default_instance_,
      ActivityList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityList));
  ActivitySearchRequest_descriptor_ = file->message_type(18);
  static const int ActivitySearchRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivitySearchRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivitySearchRequest, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivitySearchRequest, count_),
  };
  ActivitySearchRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivitySearchRequest_descriptor_,
      ActivitySearchRequest::default_instance_,
      ActivitySearchRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivitySearchRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivitySearchRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivitySearchRequest));
  ActivitySearchResponse_descriptor_ = file->message_type(19);
  static const int ActivitySearchResponse_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivitySearchResponse, total_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivitySearchResponse, activities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivitySearchResponse, similars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivitySearchResponse, cities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivitySearchResponse, users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivitySearchResponse, weibos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivitySearchResponse, lists_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivitySearchResponse, actlists_),
  };
  ActivitySearchResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivitySearchResponse_descriptor_,
      ActivitySearchResponse::default_instance_,
      ActivitySearchResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivitySearchResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivitySearchResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivitySearchResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_interface_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EntitySearchRequest_descriptor_, &EntitySearchRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EntityDetailRequest_descriptor_, &EntityDetailRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Stat_descriptor_, &Stat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RelatedEntity_descriptor_, &RelatedEntity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DetailedEntity_descriptor_, &DetailedEntity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EntitySearchResponse_descriptor_, &EntitySearchResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Influence_descriptor_, &Influence::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InfluenceSearchResponse_descriptor_, &InfluenceSearchResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityPoint_descriptor_, &ActivityPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityPOI_descriptor_, &ActivityPOI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityNext_descriptor_, &ActivityNext::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityEntity_descriptor_, &ActivityEntity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivitySimilar_descriptor_, &ActivitySimilar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityCity_descriptor_, &ActivityCity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityUser_descriptor_, &ActivityUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityWeibo_descriptor_, &ActivityWeibo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityCenterList_descriptor_, &ActivityCenterList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityList_descriptor_, &ActivityList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivitySearchRequest_descriptor_, &ActivitySearchRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivitySearchResponse_descriptor_, &ActivitySearchResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_interface_2eproto() {
  delete EntitySearchRequest::default_instance_;
  delete EntitySearchRequest_reflection_;
  delete EntityDetailRequest::default_instance_;
  delete EntityDetailRequest_reflection_;
  delete Stat::default_instance_;
  delete Stat_reflection_;
  delete RelatedEntity::default_instance_;
  delete RelatedEntity_reflection_;
  delete DetailedEntity::default_instance_;
  delete DetailedEntity_reflection_;
  delete EntitySearchResponse::default_instance_;
  delete EntitySearchResponse_reflection_;
  delete Influence::default_instance_;
  delete Influence_reflection_;
  delete InfluenceSearchResponse::default_instance_;
  delete InfluenceSearchResponse_reflection_;
  delete ActivityPoint::default_instance_;
  delete ActivityPoint_reflection_;
  delete ActivityPOI::default_instance_;
  delete ActivityPOI_reflection_;
  delete ActivityNext::default_instance_;
  delete ActivityNext_reflection_;
  delete ActivityEntity::default_instance_;
  delete ActivityEntity_reflection_;
  delete ActivitySimilar::default_instance_;
  delete ActivitySimilar_reflection_;
  delete ActivityCity::default_instance_;
  delete ActivityCity_reflection_;
  delete ActivityUser::default_instance_;
  delete ActivityUser_reflection_;
  delete ActivityWeibo::default_instance_;
  delete ActivityWeibo_reflection_;
  delete ActivityCenterList::default_instance_;
  delete ActivityCenterList_reflection_;
  delete ActivityList::default_instance_;
  delete ActivityList_reflection_;
  delete ActivitySearchRequest::default_instance_;
  delete ActivitySearchRequest_reflection_;
  delete ActivitySearchResponse::default_instance_;
  delete ActivitySearchResponse_reflection_;
}

void protobuf_AddDesc_interface_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017interface.proto\022\ndemoserver\"T\n\023EntityS"
    "earchRequest\022\017\n\007dataset\030\001 \002(\t\022\r\n\005query\030\002"
    " \002(\t\022\016\n\006offset\030\003 \001(\005\022\r\n\005count\030\004 \001(\005\"2\n\023E"
    "ntityDetailRequest\022\017\n\007dataset\030\001 \002(\t\022\n\n\002i"
    "d\030\002 \003(\005\"#\n\004Stat\022\014\n\004type\030\001 \002(\t\022\r\n\005value\030\002"
    " \002(\005\")\n\rRelatedEntity\022\014\n\004type\030\001 \002(\t\022\n\n\002i"
    "d\030\002 \003(\005\"\325\001\n\016DetailedEntity\022\r\n\005title\030\001 \002("
    "\t\022\n\n\002id\030\002 \002(\005\022\013\n\003url\030\003 \001(\t\022\023\n\013descriptio"
    "n\030\004 \001(\t\022\036\n\004stat\030\005 \003(\0132\020.demoserver.Stat\022"
    "\016\n\006topics\030\006 \001(\t\022\016\n\006imgurl\030\007 \001(\t\022\023\n\013origi"
    "nal_id\030\010 \001(\005\0221\n\016related_entity\030\t \003(\0132\031.d"
    "emoserver.RelatedEntity\"f\n\024EntitySearchR"
    "esponse\022\r\n\005query\030\001 \002(\t\022\023\n\013total_count\030\002 "
    "\002(\005\022*\n\006entity\030\003 \003(\0132\032.demoserver.Detaile"
    "dEntity\"5\n\tInfluence\022\n\n\002id\030\001 \002(\005\022\r\n\005topi"
    "c\030\002 \002(\005\022\r\n\005score\030\003 \002(\001\"\204\001\n\027InfluenceSear"
    "chResponse\022\021\n\tentity_id\030\001 \002(\005\022(\n\tinfluen"
    "ce\030\002 \003(\0132\025.demoserver.Influence\022,\n\rinflu"
    "enced_by\030\003 \003(\0132\025.demoserver.Influence\")\n"
    "\rActivityPoint\022\013\n\003lat\030\001 \002(\001\022\013\n\003lng\030\002 \002(\001"
    "\"]\n\013ActivityPOI\022\n\n\002id\030\001 \002(\t\022\014\n\004name\030\002 \002("
    "\t\022\014\n\004type\030\003 \002(\t\022\014\n\004city\030\004 \002(\t\022\013\n\003lat\030\005 \002"
    "(\001\022\013\n\003lng\030\006 \002(\001\".\n\014ActivityNext\022\014\n\004name\030"
    "\001 \002(\t\022\020\n\010duration\030\002 \002(\001\"\344\001\n\016ActivityEnti"
    "ty\022\014\n\004name\030\001 \002(\t\022\014\n\004verb\030\002 \002(\t\022\016\n\006object"
    "\030\003 \002(\t\022\022\n\nwordvector\030\004 \003(\001\022)\n\006points\030\005 \003"
    "(\0132\031.demoserver.ActivityPoint\022%\n\004pois\030\006 "
    "\003(\0132\027.demoserver.ActivityPOI\022\022\n\ntimestam"
    "ps\030\007 \003(\003\022,\n\nnextpoints\030\010 \003(\0132\030.demoserve"
    "r.ActivityNext\",\n\017ActivitySimilar\022\014\n\004nam"
    "e\030\001 \002(\t\022\013\n\003sim\030\002 \002(\001\".\n\014ActivityCity\022\014\n\004"
    "name\030\001 \002(\t\022\020\n\010activity\030\002 \003(\t\"\033\n\014Activity"
    "User\022\013\n\003ids\030\002 \003(\t\"*\n\rActivityWeibo\022\n\n\002id"
    "\030\001 \002(\t\022\r\n\005weibo\030\002 \002(\t\"(\n\022ActivityCenterL"
    "ist\022\022\n\nactivities\030\001 \003(\t\"5\n\014ActivityList\022"
    "\013\n\003sen\030\001 \002(\t\022\013\n\003lat\030\002 \002(\001\022\013\n\003lng\030\003 \002(\001\"D"
    "\n\025ActivitySearchRequest\022\014\n\004name\030\001 \002(\t\022\016\n"
    "\006offset\030\002 \001(\005\022\r\n\005count\030\003 \001(\005\"\345\002\n\026Activit"
    "ySearchResponse\022\023\n\013total_count\030\001 \002(\005\022.\n\n"
    "activities\030\002 \003(\0132\032.demoserver.ActivityEn"
    "tity\022-\n\010similars\030\003 \003(\0132\033.demoserver.Acti"
    "vitySimilar\022(\n\006cities\030\004 \003(\0132\030.demoserver"
    ".ActivityCity\022\'\n\005users\030\005 \003(\0132\030.demoserve"
    "r.ActivityUser\022)\n\006weibos\030\006 \003(\0132\031.demoser"
    "ver.ActivityWeibo\022-\n\005lists\030\007 \003(\0132\036.demos"
    "erver.ActivityCenterList\022*\n\010actlists\030\010 \003"
    "(\0132\030.demoserver.ActivityList", 1868);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "interface.proto", &protobuf_RegisterTypes);
  EntitySearchRequest::default_instance_ = new EntitySearchRequest();
  EntityDetailRequest::default_instance_ = new EntityDetailRequest();
  Stat::default_instance_ = new Stat();
  RelatedEntity::default_instance_ = new RelatedEntity();
  DetailedEntity::default_instance_ = new DetailedEntity();
  EntitySearchResponse::default_instance_ = new EntitySearchResponse();
  Influence::default_instance_ = new Influence();
  InfluenceSearchResponse::default_instance_ = new InfluenceSearchResponse();
  ActivityPoint::default_instance_ = new ActivityPoint();
  ActivityPOI::default_instance_ = new ActivityPOI();
  ActivityNext::default_instance_ = new ActivityNext();
  ActivityEntity::default_instance_ = new ActivityEntity();
  ActivitySimilar::default_instance_ = new ActivitySimilar();
  ActivityCity::default_instance_ = new ActivityCity();
  ActivityUser::default_instance_ = new ActivityUser();
  ActivityWeibo::default_instance_ = new ActivityWeibo();
  ActivityCenterList::default_instance_ = new ActivityCenterList();
  ActivityList::default_instance_ = new ActivityList();
  ActivitySearchRequest::default_instance_ = new ActivitySearchRequest();
  ActivitySearchResponse::default_instance_ = new ActivitySearchResponse();
  EntitySearchRequest::default_instance_->InitAsDefaultInstance();
  EntityDetailRequest::default_instance_->InitAsDefaultInstance();
  Stat::default_instance_->InitAsDefaultInstance();
  RelatedEntity::default_instance_->InitAsDefaultInstance();
  DetailedEntity::default_instance_->InitAsDefaultInstance();
  EntitySearchResponse::default_instance_->InitAsDefaultInstance();
  Influence::default_instance_->InitAsDefaultInstance();
  InfluenceSearchResponse::default_instance_->InitAsDefaultInstance();
  ActivityPoint::default_instance_->InitAsDefaultInstance();
  ActivityPOI::default_instance_->InitAsDefaultInstance();
  ActivityNext::default_instance_->InitAsDefaultInstance();
  ActivityEntity::default_instance_->InitAsDefaultInstance();
  ActivitySimilar::default_instance_->InitAsDefaultInstance();
  ActivityCity::default_instance_->InitAsDefaultInstance();
  ActivityUser::default_instance_->InitAsDefaultInstance();
  ActivityWeibo::default_instance_->InitAsDefaultInstance();
  ActivityCenterList::default_instance_->InitAsDefaultInstance();
  ActivityList::default_instance_->InitAsDefaultInstance();
  ActivitySearchRequest::default_instance_->InitAsDefaultInstance();
  ActivitySearchResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_interface_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_interface_2eproto {
  StaticDescriptorInitializer_interface_2eproto() {
    protobuf_AddDesc_interface_2eproto();
  }
} static_descriptor_initializer_interface_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int EntitySearchRequest::kDatasetFieldNumber;
const int EntitySearchRequest::kQueryFieldNumber;
const int EntitySearchRequest::kOffsetFieldNumber;
const int EntitySearchRequest::kCountFieldNumber;
#endif  // !_MSC_VER

EntitySearchRequest::EntitySearchRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EntitySearchRequest::InitAsDefaultInstance() {
}

EntitySearchRequest::EntitySearchRequest(const EntitySearchRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EntitySearchRequest::SharedCtor() {
  _cached_size_ = 0;
  dataset_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  query_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  offset_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntitySearchRequest::~EntitySearchRequest() {
  SharedDtor();
}

void EntitySearchRequest::SharedDtor() {
  if (dataset_ != &::google::protobuf::internal::kEmptyString) {
    delete dataset_;
  }
  if (query_ != &::google::protobuf::internal::kEmptyString) {
    delete query_;
  }
  if (this != default_instance_) {
  }
}

void EntitySearchRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntitySearchRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntitySearchRequest_descriptor_;
}

const EntitySearchRequest& EntitySearchRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();
  return *default_instance_;
}

EntitySearchRequest* EntitySearchRequest::default_instance_ = NULL;

EntitySearchRequest* EntitySearchRequest::New() const {
  return new EntitySearchRequest;
}

void EntitySearchRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dataset()) {
      if (dataset_ != &::google::protobuf::internal::kEmptyString) {
        dataset_->clear();
      }
    }
    if (has_query()) {
      if (query_ != &::google::protobuf::internal::kEmptyString) {
        query_->clear();
      }
    }
    offset_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EntitySearchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string dataset = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dataset()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dataset().data(), this->dataset().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_query;
        break;
      }

      // required string query = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->query().data(), this->query().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_offset;
        break;
      }

      // optional int32 offset = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // optional int32 count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EntitySearchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string dataset = 1;
  if (has_dataset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dataset().data(), this->dataset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dataset(), output);
  }

  // required string query = 2;
  if (has_query()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->query(), output);
  }

  // optional int32 offset = 3;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->offset(), output);
  }

  // optional int32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EntitySearchRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string dataset = 1;
  if (has_dataset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dataset().data(), this->dataset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dataset(), target);
  }

  // required string query = 2;
  if (has_query()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->query(), target);
  }

  // optional int32 offset = 3;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->offset(), target);
  }

  // optional int32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EntitySearchRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string dataset = 1;
    if (has_dataset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dataset());
    }

    // required string query = 2;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query());
    }

    // optional int32 offset = 3;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

    // optional int32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntitySearchRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EntitySearchRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EntitySearchRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EntitySearchRequest::MergeFrom(const EntitySearchRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dataset()) {
      set_dataset(from.dataset());
    }
    if (from.has_query()) {
      set_query(from.query());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EntitySearchRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntitySearchRequest::CopyFrom(const EntitySearchRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntitySearchRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EntitySearchRequest::Swap(EntitySearchRequest* other) {
  if (other != this) {
    std::swap(dataset_, other->dataset_);
    std::swap(query_, other->query_);
    std::swap(offset_, other->offset_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EntitySearchRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EntitySearchRequest_descriptor_;
  metadata.reflection = EntitySearchRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EntityDetailRequest::kDatasetFieldNumber;
const int EntityDetailRequest::kIdFieldNumber;
#endif  // !_MSC_VER

EntityDetailRequest::EntityDetailRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EntityDetailRequest::InitAsDefaultInstance() {
}

EntityDetailRequest::EntityDetailRequest(const EntityDetailRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EntityDetailRequest::SharedCtor() {
  _cached_size_ = 0;
  dataset_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntityDetailRequest::~EntityDetailRequest() {
  SharedDtor();
}

void EntityDetailRequest::SharedDtor() {
  if (dataset_ != &::google::protobuf::internal::kEmptyString) {
    delete dataset_;
  }
  if (this != default_instance_) {
  }
}

void EntityDetailRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityDetailRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntityDetailRequest_descriptor_;
}

const EntityDetailRequest& EntityDetailRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();
  return *default_instance_;
}

EntityDetailRequest* EntityDetailRequest::default_instance_ = NULL;

EntityDetailRequest* EntityDetailRequest::New() const {
  return new EntityDetailRequest;
}

void EntityDetailRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dataset()) {
      if (dataset_ != &::google::protobuf::internal::kEmptyString) {
        dataset_->clear();
      }
    }
  }
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EntityDetailRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string dataset = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dataset()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dataset().data(), this->dataset().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // repeated int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EntityDetailRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string dataset = 1;
  if (has_dataset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dataset().data(), this->dataset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dataset(), output);
  }

  // repeated int32 id = 2;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EntityDetailRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string dataset = 1;
  if (has_dataset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dataset().data(), this->dataset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dataset(), target);
  }

  // repeated int32 id = 2;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EntityDetailRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string dataset = 1;
    if (has_dataset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dataset());
    }

  }
  // repeated int32 id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityDetailRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EntityDetailRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EntityDetailRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EntityDetailRequest::MergeFrom(const EntityDetailRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dataset()) {
      set_dataset(from.dataset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EntityDetailRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityDetailRequest::CopyFrom(const EntityDetailRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityDetailRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EntityDetailRequest::Swap(EntityDetailRequest* other) {
  if (other != this) {
    std::swap(dataset_, other->dataset_);
    id_.Swap(&other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EntityDetailRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EntityDetailRequest_descriptor_;
  metadata.reflection = EntityDetailRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Stat::kTypeFieldNumber;
const int Stat::kValueFieldNumber;
#endif  // !_MSC_VER

Stat::Stat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Stat::InitAsDefaultInstance() {
}

Stat::Stat(const Stat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Stat::SharedCtor() {
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Stat::~Stat() {
  SharedDtor();
}

void Stat::SharedDtor() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void Stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stat_descriptor_;
}

const Stat& Stat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();
  return *default_instance_;
}

Stat* Stat::default_instance_ = NULL;

Stat* Stat::New() const {
  return new Stat;
}

void Stat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->type(), output);
  }

  // required int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Stat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // required int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Stat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Stat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Stat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Stat::MergeFrom(const Stat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Stat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stat::CopyFrom(const Stat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Stat::Swap(Stat* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Stat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stat_descriptor_;
  metadata.reflection = Stat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RelatedEntity::kTypeFieldNumber;
const int RelatedEntity::kIdFieldNumber;
#endif  // !_MSC_VER

RelatedEntity::RelatedEntity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RelatedEntity::InitAsDefaultInstance() {
}

RelatedEntity::RelatedEntity(const RelatedEntity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RelatedEntity::SharedCtor() {
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RelatedEntity::~RelatedEntity() {
  SharedDtor();
}

void RelatedEntity::SharedDtor() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void RelatedEntity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RelatedEntity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RelatedEntity_descriptor_;
}

const RelatedEntity& RelatedEntity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();
  return *default_instance_;
}

RelatedEntity* RelatedEntity::default_instance_ = NULL;

RelatedEntity* RelatedEntity::New() const {
  return new RelatedEntity;
}

void RelatedEntity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
  }
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RelatedEntity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // repeated int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RelatedEntity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->type(), output);
  }

  // repeated int32 id = 2;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RelatedEntity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // repeated int32 id = 2;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RelatedEntity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

  }
  // repeated int32 id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RelatedEntity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RelatedEntity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RelatedEntity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RelatedEntity::MergeFrom(const RelatedEntity& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RelatedEntity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelatedEntity::CopyFrom(const RelatedEntity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelatedEntity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RelatedEntity::Swap(RelatedEntity* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    id_.Swap(&other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RelatedEntity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RelatedEntity_descriptor_;
  metadata.reflection = RelatedEntity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DetailedEntity::kTitleFieldNumber;
const int DetailedEntity::kIdFieldNumber;
const int DetailedEntity::kUrlFieldNumber;
const int DetailedEntity::kDescriptionFieldNumber;
const int DetailedEntity::kStatFieldNumber;
const int DetailedEntity::kTopicsFieldNumber;
const int DetailedEntity::kImgurlFieldNumber;
const int DetailedEntity::kOriginalIdFieldNumber;
const int DetailedEntity::kRelatedEntityFieldNumber;
#endif  // !_MSC_VER

DetailedEntity::DetailedEntity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DetailedEntity::InitAsDefaultInstance() {
}

DetailedEntity::DetailedEntity(const DetailedEntity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DetailedEntity::SharedCtor() {
  _cached_size_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  topics_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  imgurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  original_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DetailedEntity::~DetailedEntity() {
  SharedDtor();
}

void DetailedEntity::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (topics_ != &::google::protobuf::internal::kEmptyString) {
    delete topics_;
  }
  if (imgurl_ != &::google::protobuf::internal::kEmptyString) {
    delete imgurl_;
  }
  if (this != default_instance_) {
  }
}

void DetailedEntity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetailedEntity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetailedEntity_descriptor_;
}

const DetailedEntity& DetailedEntity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();
  return *default_instance_;
}

DetailedEntity* DetailedEntity::default_instance_ = NULL;

DetailedEntity* DetailedEntity::New() const {
  return new DetailedEntity;
}

void DetailedEntity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    id_ = 0;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    if (has_topics()) {
      if (topics_ != &::google::protobuf::internal::kEmptyString) {
        topics_->clear();
      }
    }
    if (has_imgurl()) {
      if (imgurl_ != &::google::protobuf::internal::kEmptyString) {
        imgurl_->clear();
      }
    }
    original_id_ = 0;
  }
  stat_.Clear();
  related_entity_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DetailedEntity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string title = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_url;
        break;
      }

      // optional string url = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_description;
        break;
      }

      // optional string description = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stat;
        break;
      }

      // repeated .demoserver.Stat stat = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stat;
        if (input->ExpectTag(50)) goto parse_topics;
        break;
      }

      // optional string topics = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topics()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->topics().data(), this->topics().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_imgurl;
        break;
      }

      // optional string imgurl = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imgurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imgurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->imgurl().data(), this->imgurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_original_id;
        break;
      }

      // optional int32 original_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_original_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &original_id_)));
          set_has_original_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_related_entity;
        break;
      }

      // repeated .demoserver.RelatedEntity related_entity = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_related_entity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_related_entity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_related_entity;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DetailedEntity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->title(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->url(), output);
  }

  // optional string description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->description(), output);
  }

  // repeated .demoserver.Stat stat = 5;
  for (int i = 0; i < this->stat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->stat(i), output);
  }

  // optional string topics = 6;
  if (has_topics()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topics().data(), this->topics().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->topics(), output);
  }

  // optional string imgurl = 7;
  if (has_imgurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imgurl().data(), this->imgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->imgurl(), output);
  }

  // optional int32 original_id = 8;
  if (has_original_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->original_id(), output);
  }

  // repeated .demoserver.RelatedEntity related_entity = 9;
  for (int i = 0; i < this->related_entity_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->related_entity(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DetailedEntity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->url(), target);
  }

  // optional string description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->description(), target);
  }

  // repeated .demoserver.Stat stat = 5;
  for (int i = 0; i < this->stat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->stat(i), target);
  }

  // optional string topics = 6;
  if (has_topics()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topics().data(), this->topics().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->topics(), target);
  }

  // optional string imgurl = 7;
  if (has_imgurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imgurl().data(), this->imgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->imgurl(), target);
  }

  // optional int32 original_id = 8;
  if (has_original_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->original_id(), target);
  }

  // repeated .demoserver.RelatedEntity related_entity = 9;
  for (int i = 0; i < this->related_entity_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->related_entity(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DetailedEntity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string url = 3;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string description = 4;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string topics = 6;
    if (has_topics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topics());
    }

    // optional string imgurl = 7;
    if (has_imgurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imgurl());
    }

    // optional int32 original_id = 8;
    if (has_original_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->original_id());
    }

  }
  // repeated .demoserver.Stat stat = 5;
  total_size += 1 * this->stat_size();
  for (int i = 0; i < this->stat_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stat(i));
  }

  // repeated .demoserver.RelatedEntity related_entity = 9;
  total_size += 1 * this->related_entity_size();
  for (int i = 0; i < this->related_entity_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->related_entity(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetailedEntity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DetailedEntity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DetailedEntity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DetailedEntity::MergeFrom(const DetailedEntity& from) {
  GOOGLE_CHECK_NE(&from, this);
  stat_.MergeFrom(from.stat_);
  related_entity_.MergeFrom(from.related_entity_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_topics()) {
      set_topics(from.topics());
    }
    if (from.has_imgurl()) {
      set_imgurl(from.imgurl());
    }
    if (from.has_original_id()) {
      set_original_id(from.original_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DetailedEntity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetailedEntity::CopyFrom(const DetailedEntity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetailedEntity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < stat_size(); i++) {
    if (!this->stat(i).IsInitialized()) return false;
  }
  for (int i = 0; i < related_entity_size(); i++) {
    if (!this->related_entity(i).IsInitialized()) return false;
  }
  return true;
}

void DetailedEntity::Swap(DetailedEntity* other) {
  if (other != this) {
    std::swap(title_, other->title_);
    std::swap(id_, other->id_);
    std::swap(url_, other->url_);
    std::swap(description_, other->description_);
    stat_.Swap(&other->stat_);
    std::swap(topics_, other->topics_);
    std::swap(imgurl_, other->imgurl_);
    std::swap(original_id_, other->original_id_);
    related_entity_.Swap(&other->related_entity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DetailedEntity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetailedEntity_descriptor_;
  metadata.reflection = DetailedEntity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EntitySearchResponse::kQueryFieldNumber;
const int EntitySearchResponse::kTotalCountFieldNumber;
const int EntitySearchResponse::kEntityFieldNumber;
#endif  // !_MSC_VER

EntitySearchResponse::EntitySearchResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EntitySearchResponse::InitAsDefaultInstance() {
}

EntitySearchResponse::EntitySearchResponse(const EntitySearchResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EntitySearchResponse::SharedCtor() {
  _cached_size_ = 0;
  query_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  total_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntitySearchResponse::~EntitySearchResponse() {
  SharedDtor();
}

void EntitySearchResponse::SharedDtor() {
  if (query_ != &::google::protobuf::internal::kEmptyString) {
    delete query_;
  }
  if (this != default_instance_) {
  }
}

void EntitySearchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntitySearchResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntitySearchResponse_descriptor_;
}

const EntitySearchResponse& EntitySearchResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();
  return *default_instance_;
}

EntitySearchResponse* EntitySearchResponse::default_instance_ = NULL;

EntitySearchResponse* EntitySearchResponse::New() const {
  return new EntitySearchResponse;
}

void EntitySearchResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_query()) {
      if (query_ != &::google::protobuf::internal::kEmptyString) {
        query_->clear();
      }
    }
    total_count_ = 0;
  }
  entity_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EntitySearchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string query = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->query().data(), this->query().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total_count;
        break;
      }

      // required int32 total_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_count_)));
          set_has_total_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_entity;
        break;
      }

      // repeated .demoserver.DetailedEntity entity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_entity;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EntitySearchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string query = 1;
  if (has_query()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->query(), output);
  }

  // required int32 total_count = 2;
  if (has_total_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_count(), output);
  }

  // repeated .demoserver.DetailedEntity entity = 3;
  for (int i = 0; i < this->entity_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->entity(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EntitySearchResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string query = 1;
  if (has_query()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  // required int32 total_count = 2;
  if (has_total_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_count(), target);
  }

  // repeated .demoserver.DetailedEntity entity = 3;
  for (int i = 0; i < this->entity_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->entity(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EntitySearchResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string query = 1;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query());
    }

    // required int32 total_count = 2;
    if (has_total_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_count());
    }

  }
  // repeated .demoserver.DetailedEntity entity = 3;
  total_size += 1 * this->entity_size();
  for (int i = 0; i < this->entity_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entity(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntitySearchResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EntitySearchResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EntitySearchResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EntitySearchResponse::MergeFrom(const EntitySearchResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  entity_.MergeFrom(from.entity_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_query()) {
      set_query(from.query());
    }
    if (from.has_total_count()) {
      set_total_count(from.total_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EntitySearchResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntitySearchResponse::CopyFrom(const EntitySearchResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntitySearchResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < entity_size(); i++) {
    if (!this->entity(i).IsInitialized()) return false;
  }
  return true;
}

void EntitySearchResponse::Swap(EntitySearchResponse* other) {
  if (other != this) {
    std::swap(query_, other->query_);
    std::swap(total_count_, other->total_count_);
    entity_.Swap(&other->entity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EntitySearchResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EntitySearchResponse_descriptor_;
  metadata.reflection = EntitySearchResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Influence::kIdFieldNumber;
const int Influence::kTopicFieldNumber;
const int Influence::kScoreFieldNumber;
#endif  // !_MSC_VER

Influence::Influence()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Influence::InitAsDefaultInstance() {
}

Influence::Influence(const Influence& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Influence::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  topic_ = 0;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Influence::~Influence() {
  SharedDtor();
}

void Influence::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Influence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Influence::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Influence_descriptor_;
}

const Influence& Influence::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();
  return *default_instance_;
}

Influence* Influence::default_instance_ = NULL;

Influence* Influence::New() const {
  return new Influence;
}

void Influence::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    topic_ = 0;
    score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Influence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_topic;
        break;
      }

      // required int32 topic = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_topic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &topic_)));
          set_has_topic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_score;
        break;
      }

      // required double score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Influence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 topic = 2;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->topic(), output);
  }

  // required double score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Influence::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 topic = 2;
  if (has_topic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->topic(), target);
  }

  // required double score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Influence::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 topic = 2;
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->topic());
    }

    // required double score = 3;
    if (has_score()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Influence::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Influence* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Influence*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Influence::MergeFrom(const Influence& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_topic()) {
      set_topic(from.topic());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Influence::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Influence::CopyFrom(const Influence& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Influence::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Influence::Swap(Influence* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(topic_, other->topic_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Influence::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Influence_descriptor_;
  metadata.reflection = Influence_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InfluenceSearchResponse::kEntityIdFieldNumber;
const int InfluenceSearchResponse::kInfluenceFieldNumber;
const int InfluenceSearchResponse::kInfluencedByFieldNumber;
#endif  // !_MSC_VER

InfluenceSearchResponse::InfluenceSearchResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InfluenceSearchResponse::InitAsDefaultInstance() {
}

InfluenceSearchResponse::InfluenceSearchResponse(const InfluenceSearchResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InfluenceSearchResponse::SharedCtor() {
  _cached_size_ = 0;
  entity_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InfluenceSearchResponse::~InfluenceSearchResponse() {
  SharedDtor();
}

void InfluenceSearchResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InfluenceSearchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InfluenceSearchResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InfluenceSearchResponse_descriptor_;
}

const InfluenceSearchResponse& InfluenceSearchResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();
  return *default_instance_;
}

InfluenceSearchResponse* InfluenceSearchResponse::default_instance_ = NULL;

InfluenceSearchResponse* InfluenceSearchResponse::New() const {
  return new InfluenceSearchResponse;
}

void InfluenceSearchResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entity_id_ = 0;
  }
  influence_.Clear();
  influenced_by_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InfluenceSearchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 entity_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_id_)));
          set_has_entity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_influence;
        break;
      }

      // repeated .demoserver.Influence influence = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_influence:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_influence()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_influence;
        if (input->ExpectTag(26)) goto parse_influenced_by;
        break;
      }

      // repeated .demoserver.Influence influenced_by = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_influenced_by:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_influenced_by()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_influenced_by;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InfluenceSearchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 entity_id = 1;
  if (has_entity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->entity_id(), output);
  }

  // repeated .demoserver.Influence influence = 2;
  for (int i = 0; i < this->influence_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->influence(i), output);
  }

  // repeated .demoserver.Influence influenced_by = 3;
  for (int i = 0; i < this->influenced_by_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->influenced_by(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InfluenceSearchResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 entity_id = 1;
  if (has_entity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->entity_id(), target);
  }

  // repeated .demoserver.Influence influence = 2;
  for (int i = 0; i < this->influence_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->influence(i), target);
  }

  // repeated .demoserver.Influence influenced_by = 3;
  for (int i = 0; i < this->influenced_by_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->influenced_by(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InfluenceSearchResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 entity_id = 1;
    if (has_entity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_id());
    }

  }
  // repeated .demoserver.Influence influence = 2;
  total_size += 1 * this->influence_size();
  for (int i = 0; i < this->influence_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->influence(i));
  }

  // repeated .demoserver.Influence influenced_by = 3;
  total_size += 1 * this->influenced_by_size();
  for (int i = 0; i < this->influenced_by_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->influenced_by(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InfluenceSearchResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InfluenceSearchResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InfluenceSearchResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InfluenceSearchResponse::MergeFrom(const InfluenceSearchResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  influence_.MergeFrom(from.influence_);
  influenced_by_.MergeFrom(from.influenced_by_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entity_id()) {
      set_entity_id(from.entity_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InfluenceSearchResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfluenceSearchResponse::CopyFrom(const InfluenceSearchResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfluenceSearchResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < influence_size(); i++) {
    if (!this->influence(i).IsInitialized()) return false;
  }
  for (int i = 0; i < influenced_by_size(); i++) {
    if (!this->influenced_by(i).IsInitialized()) return false;
  }
  return true;
}

void InfluenceSearchResponse::Swap(InfluenceSearchResponse* other) {
  if (other != this) {
    std::swap(entity_id_, other->entity_id_);
    influence_.Swap(&other->influence_);
    influenced_by_.Swap(&other->influenced_by_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InfluenceSearchResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InfluenceSearchResponse_descriptor_;
  metadata.reflection = InfluenceSearchResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityPoint::kLatFieldNumber;
const int ActivityPoint::kLngFieldNumber;
#endif  // !_MSC_VER

ActivityPoint::ActivityPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityPoint::InitAsDefaultInstance() {
}

ActivityPoint::ActivityPoint(const ActivityPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityPoint::SharedCtor() {
  _cached_size_ = 0;
  lat_ = 0;
  lng_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityPoint::~ActivityPoint() {
  SharedDtor();
}

void ActivityPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityPoint_descriptor_;
}

const ActivityPoint& ActivityPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();
  return *default_instance_;
}

ActivityPoint* ActivityPoint::default_instance_ = NULL;

ActivityPoint* ActivityPoint::New() const {
  return new ActivityPoint;
}

void ActivityPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lat_ = 0;
    lng_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double lat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_lng;
        break;
      }

      // required double lng = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lng:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lng_)));
          set_has_lng();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double lat = 1;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lat(), output);
  }

  // required double lng = 2;
  if (has_lng()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lng(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double lat = 1;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->lat(), target);
  }

  // required double lng = 2;
  if (has_lng()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lng(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double lat = 1;
    if (has_lat()) {
      total_size += 1 + 8;
    }

    // required double lng = 2;
    if (has_lng()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityPoint::MergeFrom(const ActivityPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lng()) {
      set_lng(from.lng());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityPoint::CopyFrom(const ActivityPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ActivityPoint::Swap(ActivityPoint* other) {
  if (other != this) {
    std::swap(lat_, other->lat_);
    std::swap(lng_, other->lng_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityPoint_descriptor_;
  metadata.reflection = ActivityPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityPOI::kIdFieldNumber;
const int ActivityPOI::kNameFieldNumber;
const int ActivityPOI::kTypeFieldNumber;
const int ActivityPOI::kCityFieldNumber;
const int ActivityPOI::kLatFieldNumber;
const int ActivityPOI::kLngFieldNumber;
#endif  // !_MSC_VER

ActivityPOI::ActivityPOI()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityPOI::InitAsDefaultInstance() {
}

ActivityPOI::ActivityPOI(const ActivityPOI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityPOI::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lat_ = 0;
  lng_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityPOI::~ActivityPOI() {
  SharedDtor();
}

void ActivityPOI::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    delete city_;
  }
  if (this != default_instance_) {
  }
}

void ActivityPOI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityPOI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityPOI_descriptor_;
}

const ActivityPOI& ActivityPOI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();
  return *default_instance_;
}

ActivityPOI* ActivityPOI::default_instance_ = NULL;

ActivityPOI* ActivityPOI::New() const {
  return new ActivityPOI;
}

void ActivityPOI::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::kEmptyString) {
        city_->clear();
      }
    }
    lat_ = 0;
    lng_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityPOI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }

      // required string type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_city;
        break;
      }

      // required string city = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_lat;
        break;
      }

      // required double lat = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_lng;
        break;
      }

      // required double lng = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lng:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lng_)));
          set_has_lng();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityPOI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->type(), output);
  }

  // required string city = 4;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->city(), output);
  }

  // required double lat = 5;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->lat(), output);
  }

  // required double lng = 6;
  if (has_lng()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->lng(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityPOI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }

  // required string city = 4;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->city(), target);
  }

  // required double lat = 5;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->lat(), target);
  }

  // required double lng = 6;
  if (has_lng()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->lng(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityPOI::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required string city = 4;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

    // required double lat = 5;
    if (has_lat()) {
      total_size += 1 + 8;
    }

    // required double lng = 6;
    if (has_lng()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityPOI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityPOI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityPOI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityPOI::MergeFrom(const ActivityPOI& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lng()) {
      set_lng(from.lng());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityPOI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityPOI::CopyFrom(const ActivityPOI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityPOI::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void ActivityPOI::Swap(ActivityPOI* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(city_, other->city_);
    std::swap(lat_, other->lat_);
    std::swap(lng_, other->lng_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityPOI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityPOI_descriptor_;
  metadata.reflection = ActivityPOI_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityNext::kNameFieldNumber;
const int ActivityNext::kDurationFieldNumber;
#endif  // !_MSC_VER

ActivityNext::ActivityNext()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityNext::InitAsDefaultInstance() {
}

ActivityNext::ActivityNext(const ActivityNext& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityNext::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  duration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityNext::~ActivityNext() {
  SharedDtor();
}

void ActivityNext::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ActivityNext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityNext::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityNext_descriptor_;
}

const ActivityNext& ActivityNext::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();
  return *default_instance_;
}

ActivityNext* ActivityNext::default_instance_ = NULL;

ActivityNext* ActivityNext::New() const {
  return new ActivityNext;
}

void ActivityNext::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    duration_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityNext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_duration;
        break;
      }

      // required double duration = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityNext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required double duration = 2;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->duration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityNext::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required double duration = 2;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->duration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityNext::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required double duration = 2;
    if (has_duration()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityNext::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityNext* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityNext*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityNext::MergeFrom(const ActivityNext& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityNext::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityNext::CopyFrom(const ActivityNext& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityNext::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ActivityNext::Swap(ActivityNext* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(duration_, other->duration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityNext::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityNext_descriptor_;
  metadata.reflection = ActivityNext_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityEntity::kNameFieldNumber;
const int ActivityEntity::kVerbFieldNumber;
const int ActivityEntity::kObjectFieldNumber;
const int ActivityEntity::kWordvectorFieldNumber;
const int ActivityEntity::kPointsFieldNumber;
const int ActivityEntity::kPoisFieldNumber;
const int ActivityEntity::kTimestampsFieldNumber;
const int ActivityEntity::kNextpointsFieldNumber;
#endif  // !_MSC_VER

ActivityEntity::ActivityEntity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityEntity::InitAsDefaultInstance() {
}

ActivityEntity::ActivityEntity(const ActivityEntity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityEntity::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  verb_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  object_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityEntity::~ActivityEntity() {
  SharedDtor();
}

void ActivityEntity::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (verb_ != &::google::protobuf::internal::kEmptyString) {
    delete verb_;
  }
  if (object_ != &::google::protobuf::internal::kEmptyString) {
    delete object_;
  }
  if (this != default_instance_) {
  }
}

void ActivityEntity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityEntity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityEntity_descriptor_;
}

const ActivityEntity& ActivityEntity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();
  return *default_instance_;
}

ActivityEntity* ActivityEntity::default_instance_ = NULL;

ActivityEntity* ActivityEntity::New() const {
  return new ActivityEntity;
}

void ActivityEntity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_verb()) {
      if (verb_ != &::google::protobuf::internal::kEmptyString) {
        verb_->clear();
      }
    }
    if (has_object()) {
      if (object_ != &::google::protobuf::internal::kEmptyString) {
        object_->clear();
      }
    }
  }
  wordvector_.Clear();
  points_.Clear();
  pois_.Clear();
  timestamps_.Clear();
  nextpoints_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityEntity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_verb;
        break;
      }

      // required string verb = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_verb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verb()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->verb().data(), this->verb().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_object;
        break;
      }

      // required string object = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->object().data(), this->object().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_wordvector;
        break;
      }

      // repeated double wordvector = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_wordvector:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33, input, this->mutable_wordvector())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_wordvector())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_wordvector;
        if (input->ExpectTag(42)) goto parse_points;
        break;
      }

      // repeated .demoserver.ActivityPoint points = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_points()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_points;
        if (input->ExpectTag(50)) goto parse_pois;
        break;
      }

      // repeated .demoserver.ActivityPOI pois = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pois:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pois()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pois;
        if (input->ExpectTag(56)) goto parse_timestamps;
        break;
      }

      // repeated int64 timestamps = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 56, input, this->mutable_timestamps())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_timestamps())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_timestamps;
        if (input->ExpectTag(66)) goto parse_nextpoints;
        break;
      }

      // repeated .demoserver.ActivityNext nextpoints = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nextpoints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nextpoints()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_nextpoints;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityEntity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string verb = 2;
  if (has_verb()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->verb().data(), this->verb().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->verb(), output);
  }

  // required string object = 3;
  if (has_object()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->object().data(), this->object().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->object(), output);
  }

  // repeated double wordvector = 4;
  for (int i = 0; i < this->wordvector_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->wordvector(i), output);
  }

  // repeated .demoserver.ActivityPoint points = 5;
  for (int i = 0; i < this->points_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->points(i), output);
  }

  // repeated .demoserver.ActivityPOI pois = 6;
  for (int i = 0; i < this->pois_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->pois(i), output);
  }

  // repeated int64 timestamps = 7;
  for (int i = 0; i < this->timestamps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      7, this->timestamps(i), output);
  }

  // repeated .demoserver.ActivityNext nextpoints = 8;
  for (int i = 0; i < this->nextpoints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->nextpoints(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityEntity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string verb = 2;
  if (has_verb()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->verb().data(), this->verb().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->verb(), target);
  }

  // required string object = 3;
  if (has_object()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->object().data(), this->object().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->object(), target);
  }

  // repeated double wordvector = 4;
  for (int i = 0; i < this->wordvector_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(4, this->wordvector(i), target);
  }

  // repeated .demoserver.ActivityPoint points = 5;
  for (int i = 0; i < this->points_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->points(i), target);
  }

  // repeated .demoserver.ActivityPOI pois = 6;
  for (int i = 0; i < this->pois_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->pois(i), target);
  }

  // repeated int64 timestamps = 7;
  for (int i = 0; i < this->timestamps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(7, this->timestamps(i), target);
  }

  // repeated .demoserver.ActivityNext nextpoints = 8;
  for (int i = 0; i < this->nextpoints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->nextpoints(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityEntity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string verb = 2;
    if (has_verb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verb());
    }

    // required string object = 3;
    if (has_object()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->object());
    }

  }
  // repeated double wordvector = 4;
  {
    int data_size = 0;
    data_size = 8 * this->wordvector_size();
    total_size += 1 * this->wordvector_size() + data_size;
  }

  // repeated .demoserver.ActivityPoint points = 5;
  total_size += 1 * this->points_size();
  for (int i = 0; i < this->points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->points(i));
  }

  // repeated .demoserver.ActivityPOI pois = 6;
  total_size += 1 * this->pois_size();
  for (int i = 0; i < this->pois_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pois(i));
  }

  // repeated int64 timestamps = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->timestamps_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->timestamps(i));
    }
    total_size += 1 * this->timestamps_size() + data_size;
  }

  // repeated .demoserver.ActivityNext nextpoints = 8;
  total_size += 1 * this->nextpoints_size();
  for (int i = 0; i < this->nextpoints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nextpoints(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityEntity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityEntity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityEntity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityEntity::MergeFrom(const ActivityEntity& from) {
  GOOGLE_CHECK_NE(&from, this);
  wordvector_.MergeFrom(from.wordvector_);
  points_.MergeFrom(from.points_);
  pois_.MergeFrom(from.pois_);
  timestamps_.MergeFrom(from.timestamps_);
  nextpoints_.MergeFrom(from.nextpoints_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_verb()) {
      set_verb(from.verb());
    }
    if (from.has_object()) {
      set_object(from.object());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityEntity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityEntity::CopyFrom(const ActivityEntity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityEntity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < points_size(); i++) {
    if (!this->points(i).IsInitialized()) return false;
  }
  for (int i = 0; i < pois_size(); i++) {
    if (!this->pois(i).IsInitialized()) return false;
  }
  for (int i = 0; i < nextpoints_size(); i++) {
    if (!this->nextpoints(i).IsInitialized()) return false;
  }
  return true;
}

void ActivityEntity::Swap(ActivityEntity* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(verb_, other->verb_);
    std::swap(object_, other->object_);
    wordvector_.Swap(&other->wordvector_);
    points_.Swap(&other->points_);
    pois_.Swap(&other->pois_);
    timestamps_.Swap(&other->timestamps_);
    nextpoints_.Swap(&other->nextpoints_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityEntity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityEntity_descriptor_;
  metadata.reflection = ActivityEntity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivitySimilar::kNameFieldNumber;
const int ActivitySimilar::kSimFieldNumber;
#endif  // !_MSC_VER

ActivitySimilar::ActivitySimilar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivitySimilar::InitAsDefaultInstance() {
}

ActivitySimilar::ActivitySimilar(const ActivitySimilar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivitySimilar::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sim_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivitySimilar::~ActivitySimilar() {
  SharedDtor();
}

void ActivitySimilar::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ActivitySimilar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivitySimilar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivitySimilar_descriptor_;
}

const ActivitySimilar& ActivitySimilar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();
  return *default_instance_;
}

ActivitySimilar* ActivitySimilar::default_instance_ = NULL;

ActivitySimilar* ActivitySimilar::New() const {
  return new ActivitySimilar;
}

void ActivitySimilar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    sim_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivitySimilar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_sim;
        break;
      }

      // required double sim = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sim_)));
          set_has_sim();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivitySimilar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required double sim = 2;
  if (has_sim()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->sim(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivitySimilar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required double sim = 2;
  if (has_sim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->sim(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivitySimilar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required double sim = 2;
    if (has_sim()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivitySimilar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivitySimilar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivitySimilar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivitySimilar::MergeFrom(const ActivitySimilar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sim()) {
      set_sim(from.sim());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivitySimilar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivitySimilar::CopyFrom(const ActivitySimilar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivitySimilar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ActivitySimilar::Swap(ActivitySimilar* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(sim_, other->sim_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivitySimilar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivitySimilar_descriptor_;
  metadata.reflection = ActivitySimilar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityCity::kNameFieldNumber;
const int ActivityCity::kActivityFieldNumber;
#endif  // !_MSC_VER

ActivityCity::ActivityCity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityCity::InitAsDefaultInstance() {
}

ActivityCity::ActivityCity(const ActivityCity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityCity::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityCity::~ActivityCity() {
  SharedDtor();
}

void ActivityCity::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ActivityCity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityCity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityCity_descriptor_;
}

const ActivityCity& ActivityCity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();
  return *default_instance_;
}

ActivityCity* ActivityCity::default_instance_ = NULL;

ActivityCity* ActivityCity::New() const {
  return new ActivityCity;
}

void ActivityCity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  activity_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityCity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_activity;
        break;
      }

      // repeated string activity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_activity()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->activity(this->activity_size() - 1).data(),
            this->activity(this->activity_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_activity;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityCity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated string activity = 2;
  for (int i = 0; i < this->activity_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->activity(i).data(), this->activity(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->activity(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityCity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated string activity = 2;
  for (int i = 0; i < this->activity_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activity(i).data(), this->activity(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->activity(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityCity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated string activity = 2;
  total_size += 1 * this->activity_size();
  for (int i = 0; i < this->activity_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->activity(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityCity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityCity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityCity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityCity::MergeFrom(const ActivityCity& from) {
  GOOGLE_CHECK_NE(&from, this);
  activity_.MergeFrom(from.activity_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityCity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityCity::CopyFrom(const ActivityCity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityCity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ActivityCity::Swap(ActivityCity* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    activity_.Swap(&other->activity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityCity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityCity_descriptor_;
  metadata.reflection = ActivityCity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityUser::kIdsFieldNumber;
#endif  // !_MSC_VER

ActivityUser::ActivityUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityUser::InitAsDefaultInstance() {
}

ActivityUser::ActivityUser(const ActivityUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityUser::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityUser::~ActivityUser() {
  SharedDtor();
}

void ActivityUser::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityUser_descriptor_;
}

const ActivityUser& ActivityUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();
  return *default_instance_;
}

ActivityUser* ActivityUser::default_instance_ = NULL;

ActivityUser* ActivityUser::New() const {
  return new ActivityUser;
}

void ActivityUser::Clear() {
  ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ids(this->ids_size() - 1).data(),
            this->ids(this->ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string ids = 2;
  for (int i = 0; i < this->ids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->ids(i).data(), this->ids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string ids = 2;
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ids(i).data(), this->ids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityUser::ByteSize() const {
  int total_size = 0;

  // repeated string ids = 2;
  total_size += 1 * this->ids_size();
  for (int i = 0; i < this->ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityUser::MergeFrom(const ActivityUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  ids_.MergeFrom(from.ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityUser::CopyFrom(const ActivityUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityUser::IsInitialized() const {

  return true;
}

void ActivityUser::Swap(ActivityUser* other) {
  if (other != this) {
    ids_.Swap(&other->ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityUser_descriptor_;
  metadata.reflection = ActivityUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityWeibo::kIdFieldNumber;
const int ActivityWeibo::kWeiboFieldNumber;
#endif  // !_MSC_VER

ActivityWeibo::ActivityWeibo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityWeibo::InitAsDefaultInstance() {
}

ActivityWeibo::ActivityWeibo(const ActivityWeibo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityWeibo::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  weibo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityWeibo::~ActivityWeibo() {
  SharedDtor();
}

void ActivityWeibo::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (weibo_ != &::google::protobuf::internal::kEmptyString) {
    delete weibo_;
  }
  if (this != default_instance_) {
  }
}

void ActivityWeibo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityWeibo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityWeibo_descriptor_;
}

const ActivityWeibo& ActivityWeibo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();
  return *default_instance_;
}

ActivityWeibo* ActivityWeibo::default_instance_ = NULL;

ActivityWeibo* ActivityWeibo::New() const {
  return new ActivityWeibo;
}

void ActivityWeibo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_weibo()) {
      if (weibo_ != &::google::protobuf::internal::kEmptyString) {
        weibo_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityWeibo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_weibo;
        break;
      }

      // required string weibo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weibo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weibo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->weibo().data(), this->weibo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityWeibo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required string weibo = 2;
  if (has_weibo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weibo().data(), this->weibo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->weibo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityWeibo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string weibo = 2;
  if (has_weibo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weibo().data(), this->weibo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->weibo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityWeibo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string weibo = 2;
    if (has_weibo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weibo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityWeibo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityWeibo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityWeibo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityWeibo::MergeFrom(const ActivityWeibo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_weibo()) {
      set_weibo(from.weibo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityWeibo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityWeibo::CopyFrom(const ActivityWeibo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityWeibo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ActivityWeibo::Swap(ActivityWeibo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(weibo_, other->weibo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityWeibo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityWeibo_descriptor_;
  metadata.reflection = ActivityWeibo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityCenterList::kActivitiesFieldNumber;
#endif  // !_MSC_VER

ActivityCenterList::ActivityCenterList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityCenterList::InitAsDefaultInstance() {
}

ActivityCenterList::ActivityCenterList(const ActivityCenterList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityCenterList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityCenterList::~ActivityCenterList() {
  SharedDtor();
}

void ActivityCenterList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityCenterList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityCenterList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityCenterList_descriptor_;
}

const ActivityCenterList& ActivityCenterList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();
  return *default_instance_;
}

ActivityCenterList* ActivityCenterList::default_instance_ = NULL;

ActivityCenterList* ActivityCenterList::New() const {
  return new ActivityCenterList;
}

void ActivityCenterList::Clear() {
  activities_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityCenterList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string activities = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_activities()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->activities(this->activities_size() - 1).data(),
            this->activities(this->activities_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_activities;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityCenterList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string activities = 1;
  for (int i = 0; i < this->activities_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->activities(i).data(), this->activities(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->activities(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityCenterList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string activities = 1;
  for (int i = 0; i < this->activities_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activities(i).data(), this->activities(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->activities(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityCenterList::ByteSize() const {
  int total_size = 0;

  // repeated string activities = 1;
  total_size += 1 * this->activities_size();
  for (int i = 0; i < this->activities_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->activities(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityCenterList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityCenterList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityCenterList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityCenterList::MergeFrom(const ActivityCenterList& from) {
  GOOGLE_CHECK_NE(&from, this);
  activities_.MergeFrom(from.activities_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityCenterList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityCenterList::CopyFrom(const ActivityCenterList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityCenterList::IsInitialized() const {

  return true;
}

void ActivityCenterList::Swap(ActivityCenterList* other) {
  if (other != this) {
    activities_.Swap(&other->activities_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityCenterList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityCenterList_descriptor_;
  metadata.reflection = ActivityCenterList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityList::kSenFieldNumber;
const int ActivityList::kLatFieldNumber;
const int ActivityList::kLngFieldNumber;
#endif  // !_MSC_VER

ActivityList::ActivityList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityList::InitAsDefaultInstance() {
}

ActivityList::ActivityList(const ActivityList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityList::SharedCtor() {
  _cached_size_ = 0;
  sen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lat_ = 0;
  lng_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityList::~ActivityList() {
  SharedDtor();
}

void ActivityList::SharedDtor() {
  if (sen_ != &::google::protobuf::internal::kEmptyString) {
    delete sen_;
  }
  if (this != default_instance_) {
  }
}

void ActivityList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityList_descriptor_;
}

const ActivityList& ActivityList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();
  return *default_instance_;
}

ActivityList* ActivityList::default_instance_ = NULL;

ActivityList* ActivityList::New() const {
  return new ActivityList;
}

void ActivityList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sen()) {
      if (sen_ != &::google::protobuf::internal::kEmptyString) {
        sen_->clear();
      }
    }
    lat_ = 0;
    lng_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sen = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sen()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sen().data(), this->sen().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_lat;
        break;
      }

      // required double lat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_lng;
        break;
      }

      // required double lng = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lng:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lng_)));
          set_has_lng();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string sen = 1;
  if (has_sen()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sen().data(), this->sen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sen(), output);
  }

  // required double lat = 2;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lat(), output);
  }

  // required double lng = 3;
  if (has_lng()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lng(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string sen = 1;
  if (has_sen()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sen().data(), this->sen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sen(), target);
  }

  // required double lat = 2;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lat(), target);
  }

  // required double lng = 3;
  if (has_lng()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lng(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string sen = 1;
    if (has_sen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sen());
    }

    // required double lat = 2;
    if (has_lat()) {
      total_size += 1 + 8;
    }

    // required double lng = 3;
    if (has_lng()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityList::MergeFrom(const ActivityList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sen()) {
      set_sen(from.sen());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lng()) {
      set_lng(from.lng());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityList::CopyFrom(const ActivityList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ActivityList::Swap(ActivityList* other) {
  if (other != this) {
    std::swap(sen_, other->sen_);
    std::swap(lat_, other->lat_);
    std::swap(lng_, other->lng_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityList_descriptor_;
  metadata.reflection = ActivityList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivitySearchRequest::kNameFieldNumber;
const int ActivitySearchRequest::kOffsetFieldNumber;
const int ActivitySearchRequest::kCountFieldNumber;
#endif  // !_MSC_VER

ActivitySearchRequest::ActivitySearchRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivitySearchRequest::InitAsDefaultInstance() {
}

ActivitySearchRequest::ActivitySearchRequest(const ActivitySearchRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivitySearchRequest::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  offset_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivitySearchRequest::~ActivitySearchRequest() {
  SharedDtor();
}

void ActivitySearchRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ActivitySearchRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivitySearchRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivitySearchRequest_descriptor_;
}

const ActivitySearchRequest& ActivitySearchRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();
  return *default_instance_;
}

ActivitySearchRequest* ActivitySearchRequest::default_instance_ = NULL;

ActivitySearchRequest* ActivitySearchRequest::New() const {
  return new ActivitySearchRequest;
}

void ActivitySearchRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    offset_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivitySearchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_offset;
        break;
      }

      // optional int32 offset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional int32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivitySearchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional int32 offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->offset(), output);
  }

  // optional int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivitySearchRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->offset(), target);
  }

  // optional int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivitySearchRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 offset = 2;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

    // optional int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivitySearchRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivitySearchRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivitySearchRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivitySearchRequest::MergeFrom(const ActivitySearchRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivitySearchRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivitySearchRequest::CopyFrom(const ActivitySearchRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivitySearchRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ActivitySearchRequest::Swap(ActivitySearchRequest* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(offset_, other->offset_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivitySearchRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivitySearchRequest_descriptor_;
  metadata.reflection = ActivitySearchRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivitySearchResponse::kTotalCountFieldNumber;
const int ActivitySearchResponse::kActivitiesFieldNumber;
const int ActivitySearchResponse::kSimilarsFieldNumber;
const int ActivitySearchResponse::kCitiesFieldNumber;
const int ActivitySearchResponse::kUsersFieldNumber;
const int ActivitySearchResponse::kWeibosFieldNumber;
const int ActivitySearchResponse::kListsFieldNumber;
const int ActivitySearchResponse::kActlistsFieldNumber;
#endif  // !_MSC_VER

ActivitySearchResponse::ActivitySearchResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivitySearchResponse::InitAsDefaultInstance() {
}

ActivitySearchResponse::ActivitySearchResponse(const ActivitySearchResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivitySearchResponse::SharedCtor() {
  _cached_size_ = 0;
  total_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivitySearchResponse::~ActivitySearchResponse() {
  SharedDtor();
}

void ActivitySearchResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivitySearchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivitySearchResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivitySearchResponse_descriptor_;
}

const ActivitySearchResponse& ActivitySearchResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();
  return *default_instance_;
}

ActivitySearchResponse* ActivitySearchResponse::default_instance_ = NULL;

ActivitySearchResponse* ActivitySearchResponse::New() const {
  return new ActivitySearchResponse;
}

void ActivitySearchResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    total_count_ = 0;
  }
  activities_.Clear();
  similars_.Clear();
  cities_.Clear();
  users_.Clear();
  weibos_.Clear();
  lists_.Clear();
  actlists_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivitySearchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 total_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_count_)));
          set_has_total_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_activities;
        break;
      }

      // repeated .demoserver.ActivityEntity activities = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activities()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_activities;
        if (input->ExpectTag(26)) goto parse_similars;
        break;
      }

      // repeated .demoserver.ActivitySimilar similars = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_similars:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_similars()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_similars;
        if (input->ExpectTag(34)) goto parse_cities;
        break;
      }

      // repeated .demoserver.ActivityCity cities = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cities()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cities;
        if (input->ExpectTag(42)) goto parse_users;
        break;
      }

      // repeated .demoserver.ActivityUser users = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_users;
        if (input->ExpectTag(50)) goto parse_weibos;
        break;
      }

      // repeated .demoserver.ActivityWeibo weibos = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weibos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weibos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_weibos;
        if (input->ExpectTag(58)) goto parse_lists;
        break;
      }

      // repeated .demoserver.ActivityCenterList lists = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lists:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lists()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_lists;
        if (input->ExpectTag(66)) goto parse_actlists;
        break;
      }

      // repeated .demoserver.ActivityList actlists = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actlists:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actlists()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_actlists;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivitySearchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 total_count = 1;
  if (has_total_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total_count(), output);
  }

  // repeated .demoserver.ActivityEntity activities = 2;
  for (int i = 0; i < this->activities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->activities(i), output);
  }

  // repeated .demoserver.ActivitySimilar similars = 3;
  for (int i = 0; i < this->similars_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->similars(i), output);
  }

  // repeated .demoserver.ActivityCity cities = 4;
  for (int i = 0; i < this->cities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cities(i), output);
  }

  // repeated .demoserver.ActivityUser users = 5;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->users(i), output);
  }

  // repeated .demoserver.ActivityWeibo weibos = 6;
  for (int i = 0; i < this->weibos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->weibos(i), output);
  }

  // repeated .demoserver.ActivityCenterList lists = 7;
  for (int i = 0; i < this->lists_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->lists(i), output);
  }

  // repeated .demoserver.ActivityList actlists = 8;
  for (int i = 0; i < this->actlists_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->actlists(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivitySearchResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 total_count = 1;
  if (has_total_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->total_count(), target);
  }

  // repeated .demoserver.ActivityEntity activities = 2;
  for (int i = 0; i < this->activities_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->activities(i), target);
  }

  // repeated .demoserver.ActivitySimilar similars = 3;
  for (int i = 0; i < this->similars_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->similars(i), target);
  }

  // repeated .demoserver.ActivityCity cities = 4;
  for (int i = 0; i < this->cities_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->cities(i), target);
  }

  // repeated .demoserver.ActivityUser users = 5;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->users(i), target);
  }

  // repeated .demoserver.ActivityWeibo weibos = 6;
  for (int i = 0; i < this->weibos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->weibos(i), target);
  }

  // repeated .demoserver.ActivityCenterList lists = 7;
  for (int i = 0; i < this->lists_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->lists(i), target);
  }

  // repeated .demoserver.ActivityList actlists = 8;
  for (int i = 0; i < this->actlists_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->actlists(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivitySearchResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 total_count = 1;
    if (has_total_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_count());
    }

  }
  // repeated .demoserver.ActivityEntity activities = 2;
  total_size += 1 * this->activities_size();
  for (int i = 0; i < this->activities_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activities(i));
  }

  // repeated .demoserver.ActivitySimilar similars = 3;
  total_size += 1 * this->similars_size();
  for (int i = 0; i < this->similars_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->similars(i));
  }

  // repeated .demoserver.ActivityCity cities = 4;
  total_size += 1 * this->cities_size();
  for (int i = 0; i < this->cities_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cities(i));
  }

  // repeated .demoserver.ActivityUser users = 5;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }

  // repeated .demoserver.ActivityWeibo weibos = 6;
  total_size += 1 * this->weibos_size();
  for (int i = 0; i < this->weibos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->weibos(i));
  }

  // repeated .demoserver.ActivityCenterList lists = 7;
  total_size += 1 * this->lists_size();
  for (int i = 0; i < this->lists_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lists(i));
  }

  // repeated .demoserver.ActivityList actlists = 8;
  total_size += 1 * this->actlists_size();
  for (int i = 0; i < this->actlists_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actlists(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivitySearchResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivitySearchResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivitySearchResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivitySearchResponse::MergeFrom(const ActivitySearchResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  activities_.MergeFrom(from.activities_);
  similars_.MergeFrom(from.similars_);
  cities_.MergeFrom(from.cities_);
  users_.MergeFrom(from.users_);
  weibos_.MergeFrom(from.weibos_);
  lists_.MergeFrom(from.lists_);
  actlists_.MergeFrom(from.actlists_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_count()) {
      set_total_count(from.total_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivitySearchResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivitySearchResponse::CopyFrom(const ActivitySearchResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivitySearchResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < activities_size(); i++) {
    if (!this->activities(i).IsInitialized()) return false;
  }
  for (int i = 0; i < similars_size(); i++) {
    if (!this->similars(i).IsInitialized()) return false;
  }
  for (int i = 0; i < cities_size(); i++) {
    if (!this->cities(i).IsInitialized()) return false;
  }
  for (int i = 0; i < weibos_size(); i++) {
    if (!this->weibos(i).IsInitialized()) return false;
  }
  for (int i = 0; i < actlists_size(); i++) {
    if (!this->actlists(i).IsInitialized()) return false;
  }
  return true;
}

void ActivitySearchResponse::Swap(ActivitySearchResponse* other) {
  if (other != this) {
    std::swap(total_count_, other->total_count_);
    activities_.Swap(&other->activities_);
    similars_.Swap(&other->similars_);
    cities_.Swap(&other->cities_);
    users_.Swap(&other->users_);
    weibos_.Swap(&other->weibos_);
    lists_.Swap(&other->lists_);
    actlists_.Swap(&other->actlists_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivitySearchResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivitySearchResponse_descriptor_;
  metadata.reflection = ActivitySearchResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace demoserver

// @@protoc_insertion_point(global_scope)
