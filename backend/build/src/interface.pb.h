// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: interface.proto

#ifndef PROTOBUF_interface_2eproto__INCLUDED
#define PROTOBUF_interface_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace demoserver {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_interface_2eproto();
void protobuf_AssignDesc_interface_2eproto();
void protobuf_ShutdownFile_interface_2eproto();

class EntitySearchRequest;
class EntityDetailRequest;
class Stat;
class RelatedEntity;
class DetailedEntity;
class EntitySearchResponse;
class Influence;
class InfluenceSearchResponse;
class ActivityPoint;
class ActivityPOI;
class ActivityNext;
class ActivityEntity;
class ActivitySimilar;
class ActivityCity;
class ActivityUser;
class ActivityWeibo;
class ActivityCenterList;
class ActivityList;
class ActivitySearchRequest;
class ActivitySearchResponse;

// ===================================================================

class EntitySearchRequest : public ::google::protobuf::Message {
 public:
  EntitySearchRequest();
  virtual ~EntitySearchRequest();

  EntitySearchRequest(const EntitySearchRequest& from);

  inline EntitySearchRequest& operator=(const EntitySearchRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EntitySearchRequest& default_instance();

  void Swap(EntitySearchRequest* other);

  // implements Message ----------------------------------------------

  EntitySearchRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EntitySearchRequest& from);
  void MergeFrom(const EntitySearchRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string dataset = 1;
  inline bool has_dataset() const;
  inline void clear_dataset();
  static const int kDatasetFieldNumber = 1;
  inline const ::std::string& dataset() const;
  inline void set_dataset(const ::std::string& value);
  inline void set_dataset(const char* value);
  inline void set_dataset(const char* value, size_t size);
  inline ::std::string* mutable_dataset();
  inline ::std::string* release_dataset();
  inline void set_allocated_dataset(::std::string* dataset);

  // required string query = 2;
  inline bool has_query() const;
  inline void clear_query();
  static const int kQueryFieldNumber = 2;
  inline const ::std::string& query() const;
  inline void set_query(const ::std::string& value);
  inline void set_query(const char* value);
  inline void set_query(const char* value, size_t size);
  inline ::std::string* mutable_query();
  inline ::std::string* release_query();
  inline void set_allocated_query(::std::string* query);

  // optional int32 offset = 3;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 3;
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // optional int32 count = 4;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 4;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:demoserver.EntitySearchRequest)
 private:
  inline void set_has_dataset();
  inline void clear_has_dataset();
  inline void set_has_query();
  inline void clear_has_query();
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* dataset_;
  ::std::string* query_;
  ::google::protobuf::int32 offset_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_interface_2eproto();
  friend void protobuf_AssignDesc_interface_2eproto();
  friend void protobuf_ShutdownFile_interface_2eproto();

  void InitAsDefaultInstance();
  static EntitySearchRequest* default_instance_;
};
// -------------------------------------------------------------------

class EntityDetailRequest : public ::google::protobuf::Message {
 public:
  EntityDetailRequest();
  virtual ~EntityDetailRequest();

  EntityDetailRequest(const EntityDetailRequest& from);

  inline EntityDetailRequest& operator=(const EntityDetailRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EntityDetailRequest& default_instance();

  void Swap(EntityDetailRequest* other);

  // implements Message ----------------------------------------------

  EntityDetailRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EntityDetailRequest& from);
  void MergeFrom(const EntityDetailRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string dataset = 1;
  inline bool has_dataset() const;
  inline void clear_dataset();
  static const int kDatasetFieldNumber = 1;
  inline const ::std::string& dataset() const;
  inline void set_dataset(const ::std::string& value);
  inline void set_dataset(const char* value);
  inline void set_dataset(const char* value, size_t size);
  inline ::std::string* mutable_dataset();
  inline ::std::string* release_dataset();
  inline void set_allocated_dataset(::std::string* dataset);

  // repeated int32 id = 2;
  inline int id_size() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id(int index) const;
  inline void set_id(int index, ::google::protobuf::int32 value);
  inline void add_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_id();

  // @@protoc_insertion_point(class_scope:demoserver.EntityDetailRequest)
 private:
  inline void set_has_dataset();
  inline void clear_has_dataset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* dataset_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_interface_2eproto();
  friend void protobuf_AssignDesc_interface_2eproto();
  friend void protobuf_ShutdownFile_interface_2eproto();

  void InitAsDefaultInstance();
  static EntityDetailRequest* default_instance_;
};
// -------------------------------------------------------------------

class Stat : public ::google::protobuf::Message {
 public:
  Stat();
  virtual ~Stat();

  Stat(const Stat& from);

  inline Stat& operator=(const Stat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Stat& default_instance();

  void Swap(Stat* other);

  // implements Message ----------------------------------------------

  Stat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Stat& from);
  void MergeFrom(const Stat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // required int32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:demoserver.Stat)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* type_;
  ::google::protobuf::int32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_interface_2eproto();
  friend void protobuf_AssignDesc_interface_2eproto();
  friend void protobuf_ShutdownFile_interface_2eproto();

  void InitAsDefaultInstance();
  static Stat* default_instance_;
};
// -------------------------------------------------------------------

class RelatedEntity : public ::google::protobuf::Message {
 public:
  RelatedEntity();
  virtual ~RelatedEntity();

  RelatedEntity(const RelatedEntity& from);

  inline RelatedEntity& operator=(const RelatedEntity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RelatedEntity& default_instance();

  void Swap(RelatedEntity* other);

  // implements Message ----------------------------------------------

  RelatedEntity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RelatedEntity& from);
  void MergeFrom(const RelatedEntity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // repeated int32 id = 2;
  inline int id_size() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id(int index) const;
  inline void set_id(int index, ::google::protobuf::int32 value);
  inline void add_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_id();

  // @@protoc_insertion_point(class_scope:demoserver.RelatedEntity)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_interface_2eproto();
  friend void protobuf_AssignDesc_interface_2eproto();
  friend void protobuf_ShutdownFile_interface_2eproto();

  void InitAsDefaultInstance();
  static RelatedEntity* default_instance_;
};
// -------------------------------------------------------------------

class DetailedEntity : public ::google::protobuf::Message {
 public:
  DetailedEntity();
  virtual ~DetailedEntity();

  DetailedEntity(const DetailedEntity& from);

  inline DetailedEntity& operator=(const DetailedEntity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DetailedEntity& default_instance();

  void Swap(DetailedEntity* other);

  // implements Message ----------------------------------------------

  DetailedEntity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DetailedEntity& from);
  void MergeFrom(const DetailedEntity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string title = 1;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 1;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // required int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string url = 3;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 3;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // optional string description = 4;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 4;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // repeated .demoserver.Stat stat = 5;
  inline int stat_size() const;
  inline void clear_stat();
  static const int kStatFieldNumber = 5;
  inline const ::demoserver::Stat& stat(int index) const;
  inline ::demoserver::Stat* mutable_stat(int index);
  inline ::demoserver::Stat* add_stat();
  inline const ::google::protobuf::RepeatedPtrField< ::demoserver::Stat >&
      stat() const;
  inline ::google::protobuf::RepeatedPtrField< ::demoserver::Stat >*
      mutable_stat();

  // optional string topics = 6;
  inline bool has_topics() const;
  inline void clear_topics();
  static const int kTopicsFieldNumber = 6;
  inline const ::std::string& topics() const;
  inline void set_topics(const ::std::string& value);
  inline void set_topics(const char* value);
  inline void set_topics(const char* value, size_t size);
  inline ::std::string* mutable_topics();
  inline ::std::string* release_topics();
  inline void set_allocated_topics(::std::string* topics);

  // optional string imgurl = 7;
  inline bool has_imgurl() const;
  inline void clear_imgurl();
  static const int kImgurlFieldNumber = 7;
  inline const ::std::string& imgurl() const;
  inline void set_imgurl(const ::std::string& value);
  inline void set_imgurl(const char* value);
  inline void set_imgurl(const char* value, size_t size);
  inline ::std::string* mutable_imgurl();
  inline ::std::string* release_imgurl();
  inline void set_allocated_imgurl(::std::string* imgurl);

  // optional int32 original_id = 8;
  inline bool has_original_id() const;
  inline void clear_original_id();
  static const int kOriginalIdFieldNumber = 8;
  inline ::google::protobuf::int32 original_id() const;
  inline void set_original_id(::google::protobuf::int32 value);

  // repeated .demoserver.RelatedEntity related_entity = 9;
  inline int related_entity_size() const;
  inline void clear_related_entity();
  static const int kRelatedEntityFieldNumber = 9;
  inline const ::demoserver::RelatedEntity& related_entity(int index) const;
  inline ::demoserver::RelatedEntity* mutable_related_entity(int index);
  inline ::demoserver::RelatedEntity* add_related_entity();
  inline const ::google::protobuf::RepeatedPtrField< ::demoserver::RelatedEntity >&
      related_entity() const;
  inline ::google::protobuf::RepeatedPtrField< ::demoserver::RelatedEntity >*
      mutable_related_entity();

  // @@protoc_insertion_point(class_scope:demoserver.DetailedEntity)
 private:
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_topics();
  inline void clear_has_topics();
  inline void set_has_imgurl();
  inline void clear_has_imgurl();
  inline void set_has_original_id();
  inline void clear_has_original_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* title_;
  ::std::string* url_;
  ::std::string* description_;
  ::google::protobuf::RepeatedPtrField< ::demoserver::Stat > stat_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 original_id_;
  ::std::string* topics_;
  ::std::string* imgurl_;
  ::google::protobuf::RepeatedPtrField< ::demoserver::RelatedEntity > related_entity_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_interface_2eproto();
  friend void protobuf_AssignDesc_interface_2eproto();
  friend void protobuf_ShutdownFile_interface_2eproto();

  void InitAsDefaultInstance();
  static DetailedEntity* default_instance_;
};
// -------------------------------------------------------------------

class EntitySearchResponse : public ::google::protobuf::Message {
 public:
  EntitySearchResponse();
  virtual ~EntitySearchResponse();

  EntitySearchResponse(const EntitySearchResponse& from);

  inline EntitySearchResponse& operator=(const EntitySearchResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EntitySearchResponse& default_instance();

  void Swap(EntitySearchResponse* other);

  // implements Message ----------------------------------------------

  EntitySearchResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EntitySearchResponse& from);
  void MergeFrom(const EntitySearchResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string query = 1;
  inline bool has_query() const;
  inline void clear_query();
  static const int kQueryFieldNumber = 1;
  inline const ::std::string& query() const;
  inline void set_query(const ::std::string& value);
  inline void set_query(const char* value);
  inline void set_query(const char* value, size_t size);
  inline ::std::string* mutable_query();
  inline ::std::string* release_query();
  inline void set_allocated_query(::std::string* query);

  // required int32 total_count = 2;
  inline bool has_total_count() const;
  inline void clear_total_count();
  static const int kTotalCountFieldNumber = 2;
  inline ::google::protobuf::int32 total_count() const;
  inline void set_total_count(::google::protobuf::int32 value);

  // repeated .demoserver.DetailedEntity entity = 3;
  inline int entity_size() const;
  inline void clear_entity();
  static const int kEntityFieldNumber = 3;
  inline const ::demoserver::DetailedEntity& entity(int index) const;
  inline ::demoserver::DetailedEntity* mutable_entity(int index);
  inline ::demoserver::DetailedEntity* add_entity();
  inline const ::google::protobuf::RepeatedPtrField< ::demoserver::DetailedEntity >&
      entity() const;
  inline ::google::protobuf::RepeatedPtrField< ::demoserver::DetailedEntity >*
      mutable_entity();

  // @@protoc_insertion_point(class_scope:demoserver.EntitySearchResponse)
 private:
  inline void set_has_query();
  inline void clear_has_query();
  inline void set_has_total_count();
  inline void clear_has_total_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* query_;
  ::google::protobuf::RepeatedPtrField< ::demoserver::DetailedEntity > entity_;
  ::google::protobuf::int32 total_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_interface_2eproto();
  friend void protobuf_AssignDesc_interface_2eproto();
  friend void protobuf_ShutdownFile_interface_2eproto();

  void InitAsDefaultInstance();
  static EntitySearchResponse* default_instance_;
};
// -------------------------------------------------------------------

class Influence : public ::google::protobuf::Message {
 public:
  Influence();
  virtual ~Influence();

  Influence(const Influence& from);

  inline Influence& operator=(const Influence& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Influence& default_instance();

  void Swap(Influence* other);

  // implements Message ----------------------------------------------

  Influence* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Influence& from);
  void MergeFrom(const Influence& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 topic = 2;
  inline bool has_topic() const;
  inline void clear_topic();
  static const int kTopicFieldNumber = 2;
  inline ::google::protobuf::int32 topic() const;
  inline void set_topic(::google::protobuf::int32 value);

  // required double score = 3;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 3;
  inline double score() const;
  inline void set_score(double value);

  // @@protoc_insertion_point(class_scope:demoserver.Influence)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_topic();
  inline void clear_has_topic();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 topic_;
  double score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_interface_2eproto();
  friend void protobuf_AssignDesc_interface_2eproto();
  friend void protobuf_ShutdownFile_interface_2eproto();

  void InitAsDefaultInstance();
  static Influence* default_instance_;
};
// -------------------------------------------------------------------

class InfluenceSearchResponse : public ::google::protobuf::Message {
 public:
  InfluenceSearchResponse();
  virtual ~InfluenceSearchResponse();

  InfluenceSearchResponse(const InfluenceSearchResponse& from);

  inline InfluenceSearchResponse& operator=(const InfluenceSearchResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InfluenceSearchResponse& default_instance();

  void Swap(InfluenceSearchResponse* other);

  // implements Message ----------------------------------------------

  InfluenceSearchResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InfluenceSearchResponse& from);
  void MergeFrom(const InfluenceSearchResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 entity_id = 1;
  inline bool has_entity_id() const;
  inline void clear_entity_id();
  static const int kEntityIdFieldNumber = 1;
  inline ::google::protobuf::int32 entity_id() const;
  inline void set_entity_id(::google::protobuf::int32 value);

  // repeated .demoserver.Influence influence = 2;
  inline int influence_size() const;
  inline void clear_influence();
  static const int kInfluenceFieldNumber = 2;
  inline const ::demoserver::Influence& influence(int index) const;
  inline ::demoserver::Influence* mutable_influence(int index);
  inline ::demoserver::Influence* add_influence();
  inline const ::google::protobuf::RepeatedPtrField< ::demoserver::Influence >&
      influence() const;
  inline ::google::protobuf::RepeatedPtrField< ::demoserver::Influence >*
      mutable_influence();

  // repeated .demoserver.Influence influenced_by = 3;
  inline int influenced_by_size() const;
  inline void clear_influenced_by();
  static const int kInfluencedByFieldNumber = 3;
  inline const ::demoserver::Influence& influenced_by(int index) const;
  inline ::demoserver::Influence* mutable_influenced_by(int index);
  inline ::demoserver::Influence* add_influenced_by();
  inline const ::google::protobuf::RepeatedPtrField< ::demoserver::Influence >&
      influenced_by() const;
  inline ::google::protobuf::RepeatedPtrField< ::demoserver::Influence >*
      mutable_influenced_by();

  // @@protoc_insertion_point(class_scope:demoserver.InfluenceSearchResponse)
 private:
  inline void set_has_entity_id();
  inline void clear_has_entity_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::demoserver::Influence > influence_;
  ::google::protobuf::RepeatedPtrField< ::demoserver::Influence > influenced_by_;
  ::google::protobuf::int32 entity_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_interface_2eproto();
  friend void protobuf_AssignDesc_interface_2eproto();
  friend void protobuf_ShutdownFile_interface_2eproto();

  void InitAsDefaultInstance();
  static InfluenceSearchResponse* default_instance_;
};
// -------------------------------------------------------------------

class ActivityPoint : public ::google::protobuf::Message {
 public:
  ActivityPoint();
  virtual ~ActivityPoint();

  ActivityPoint(const ActivityPoint& from);

  inline ActivityPoint& operator=(const ActivityPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActivityPoint& default_instance();

  void Swap(ActivityPoint* other);

  // implements Message ----------------------------------------------

  ActivityPoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActivityPoint& from);
  void MergeFrom(const ActivityPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double lat = 1;
  inline bool has_lat() const;
  inline void clear_lat();
  static const int kLatFieldNumber = 1;
  inline double lat() const;
  inline void set_lat(double value);

  // required double lng = 2;
  inline bool has_lng() const;
  inline void clear_lng();
  static const int kLngFieldNumber = 2;
  inline double lng() const;
  inline void set_lng(double value);

  // @@protoc_insertion_point(class_scope:demoserver.ActivityPoint)
 private:
  inline void set_has_lat();
  inline void clear_has_lat();
  inline void set_has_lng();
  inline void clear_has_lng();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double lat_;
  double lng_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_interface_2eproto();
  friend void protobuf_AssignDesc_interface_2eproto();
  friend void protobuf_ShutdownFile_interface_2eproto();

  void InitAsDefaultInstance();
  static ActivityPoint* default_instance_;
};
// -------------------------------------------------------------------

class ActivityPOI : public ::google::protobuf::Message {
 public:
  ActivityPOI();
  virtual ~ActivityPOI();

  ActivityPOI(const ActivityPOI& from);

  inline ActivityPOI& operator=(const ActivityPOI& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActivityPOI& default_instance();

  void Swap(ActivityPOI* other);

  // implements Message ----------------------------------------------

  ActivityPOI* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActivityPOI& from);
  void MergeFrom(const ActivityPOI& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // required string city = 4;
  inline bool has_city() const;
  inline void clear_city();
  static const int kCityFieldNumber = 4;
  inline const ::std::string& city() const;
  inline void set_city(const ::std::string& value);
  inline void set_city(const char* value);
  inline void set_city(const char* value, size_t size);
  inline ::std::string* mutable_city();
  inline ::std::string* release_city();
  inline void set_allocated_city(::std::string* city);

  // required double lat = 5;
  inline bool has_lat() const;
  inline void clear_lat();
  static const int kLatFieldNumber = 5;
  inline double lat() const;
  inline void set_lat(double value);

  // required double lng = 6;
  inline bool has_lng() const;
  inline void clear_lng();
  static const int kLngFieldNumber = 6;
  inline double lng() const;
  inline void set_lng(double value);

  // @@protoc_insertion_point(class_scope:demoserver.ActivityPOI)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_city();
  inline void clear_has_city();
  inline void set_has_lat();
  inline void clear_has_lat();
  inline void set_has_lng();
  inline void clear_has_lng();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::std::string* name_;
  ::std::string* type_;
  ::std::string* city_;
  double lat_;
  double lng_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_interface_2eproto();
  friend void protobuf_AssignDesc_interface_2eproto();
  friend void protobuf_ShutdownFile_interface_2eproto();

  void InitAsDefaultInstance();
  static ActivityPOI* default_instance_;
};
// -------------------------------------------------------------------

class ActivityNext : public ::google::protobuf::Message {
 public:
  ActivityNext();
  virtual ~ActivityNext();

  ActivityNext(const ActivityNext& from);

  inline ActivityNext& operator=(const ActivityNext& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActivityNext& default_instance();

  void Swap(ActivityNext* other);

  // implements Message ----------------------------------------------

  ActivityNext* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActivityNext& from);
  void MergeFrom(const ActivityNext& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required double duration = 2;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 2;
  inline double duration() const;
  inline void set_duration(double value);

  // @@protoc_insertion_point(class_scope:demoserver.ActivityNext)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_duration();
  inline void clear_has_duration();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  double duration_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_interface_2eproto();
  friend void protobuf_AssignDesc_interface_2eproto();
  friend void protobuf_ShutdownFile_interface_2eproto();

  void InitAsDefaultInstance();
  static ActivityNext* default_instance_;
};
// -------------------------------------------------------------------

class ActivityEntity : public ::google::protobuf::Message {
 public:
  ActivityEntity();
  virtual ~ActivityEntity();

  ActivityEntity(const ActivityEntity& from);

  inline ActivityEntity& operator=(const ActivityEntity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActivityEntity& default_instance();

  void Swap(ActivityEntity* other);

  // implements Message ----------------------------------------------

  ActivityEntity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActivityEntity& from);
  void MergeFrom(const ActivityEntity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string verb = 2;
  inline bool has_verb() const;
  inline void clear_verb();
  static const int kVerbFieldNumber = 2;
  inline const ::std::string& verb() const;
  inline void set_verb(const ::std::string& value);
  inline void set_verb(const char* value);
  inline void set_verb(const char* value, size_t size);
  inline ::std::string* mutable_verb();
  inline ::std::string* release_verb();
  inline void set_allocated_verb(::std::string* verb);

  // required string object = 3;
  inline bool has_object() const;
  inline void clear_object();
  static const int kObjectFieldNumber = 3;
  inline const ::std::string& object() const;
  inline void set_object(const ::std::string& value);
  inline void set_object(const char* value);
  inline void set_object(const char* value, size_t size);
  inline ::std::string* mutable_object();
  inline ::std::string* release_object();
  inline void set_allocated_object(::std::string* object);

  // repeated double wordvector = 4;
  inline int wordvector_size() const;
  inline void clear_wordvector();
  static const int kWordvectorFieldNumber = 4;
  inline double wordvector(int index) const;
  inline void set_wordvector(int index, double value);
  inline void add_wordvector(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      wordvector() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_wordvector();

  // repeated .demoserver.ActivityPoint points = 5;
  inline int points_size() const;
  inline void clear_points();
  static const int kPointsFieldNumber = 5;
  inline const ::demoserver::ActivityPoint& points(int index) const;
  inline ::demoserver::ActivityPoint* mutable_points(int index);
  inline ::demoserver::ActivityPoint* add_points();
  inline const ::google::protobuf::RepeatedPtrField< ::demoserver::ActivityPoint >&
      points() const;
  inline ::google::protobuf::RepeatedPtrField< ::demoserver::ActivityPoint >*
      mutable_points();

  // repeated .demoserver.ActivityPOI pois = 6;
  inline int pois_size() const;
  inline void clear_pois();
  static const int kPoisFieldNumber = 6;
  inline const ::demoserver::ActivityPOI& pois(int index) const;
  inline ::demoserver::ActivityPOI* mutable_pois(int index);
  inline ::demoserver::ActivityPOI* add_pois();
  inline const ::google::protobuf::RepeatedPtrField< ::demoserver::ActivityPOI >&
      pois() const;
  inline ::google::protobuf::RepeatedPtrField< ::demoserver::ActivityPOI >*
      mutable_pois();

  // repeated int64 timestamps = 7;
  inline int timestamps_size() const;
  inline void clear_timestamps();
  static const int kTimestampsFieldNumber = 7;
  inline ::google::protobuf::int64 timestamps(int index) const;
  inline void set_timestamps(int index, ::google::protobuf::int64 value);
  inline void add_timestamps(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      timestamps() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_timestamps();

  // repeated .demoserver.ActivityNext nextpoints = 8;
  inline int nextpoints_size() const;
  inline void clear_nextpoints();
  static const int kNextpointsFieldNumber = 8;
  inline const ::demoserver::ActivityNext& nextpoints(int index) const;
  inline ::demoserver::ActivityNext* mutable_nextpoints(int index);
  inline ::demoserver::ActivityNext* add_nextpoints();
  inline const ::google::protobuf::RepeatedPtrField< ::demoserver::ActivityNext >&
      nextpoints() const;
  inline ::google::protobuf::RepeatedPtrField< ::demoserver::ActivityNext >*
      mutable_nextpoints();

  // @@protoc_insertion_point(class_scope:demoserver.ActivityEntity)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_verb();
  inline void clear_has_verb();
  inline void set_has_object();
  inline void clear_has_object();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* verb_;
  ::std::string* object_;
  ::google::protobuf::RepeatedField< double > wordvector_;
  ::google::protobuf::RepeatedPtrField< ::demoserver::ActivityPoint > points_;
  ::google::protobuf::RepeatedPtrField< ::demoserver::ActivityPOI > pois_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > timestamps_;
  ::google::protobuf::RepeatedPtrField< ::demoserver::ActivityNext > nextpoints_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_interface_2eproto();
  friend void protobuf_AssignDesc_interface_2eproto();
  friend void protobuf_ShutdownFile_interface_2eproto();

  void InitAsDefaultInstance();
  static ActivityEntity* default_instance_;
};
// -------------------------------------------------------------------

class ActivitySimilar : public ::google::protobuf::Message {
 public:
  ActivitySimilar();
  virtual ~ActivitySimilar();

  ActivitySimilar(const ActivitySimilar& from);

  inline ActivitySimilar& operator=(const ActivitySimilar& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActivitySimilar& default_instance();

  void Swap(ActivitySimilar* other);

  // implements Message ----------------------------------------------

  ActivitySimilar* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActivitySimilar& from);
  void MergeFrom(const ActivitySimilar& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required double sim = 2;
  inline bool has_sim() const;
  inline void clear_sim();
  static const int kSimFieldNumber = 2;
  inline double sim() const;
  inline void set_sim(double value);

  // @@protoc_insertion_point(class_scope:demoserver.ActivitySimilar)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_sim();
  inline void clear_has_sim();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  double sim_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_interface_2eproto();
  friend void protobuf_AssignDesc_interface_2eproto();
  friend void protobuf_ShutdownFile_interface_2eproto();

  void InitAsDefaultInstance();
  static ActivitySimilar* default_instance_;
};
// -------------------------------------------------------------------

class ActivityCity : public ::google::protobuf::Message {
 public:
  ActivityCity();
  virtual ~ActivityCity();

  ActivityCity(const ActivityCity& from);

  inline ActivityCity& operator=(const ActivityCity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActivityCity& default_instance();

  void Swap(ActivityCity* other);

  // implements Message ----------------------------------------------

  ActivityCity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActivityCity& from);
  void MergeFrom(const ActivityCity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated string activity = 2;
  inline int activity_size() const;
  inline void clear_activity();
  static const int kActivityFieldNumber = 2;
  inline const ::std::string& activity(int index) const;
  inline ::std::string* mutable_activity(int index);
  inline void set_activity(int index, const ::std::string& value);
  inline void set_activity(int index, const char* value);
  inline void set_activity(int index, const char* value, size_t size);
  inline ::std::string* add_activity();
  inline void add_activity(const ::std::string& value);
  inline void add_activity(const char* value);
  inline void add_activity(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& activity() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_activity();

  // @@protoc_insertion_point(class_scope:demoserver.ActivityCity)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> activity_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_interface_2eproto();
  friend void protobuf_AssignDesc_interface_2eproto();
  friend void protobuf_ShutdownFile_interface_2eproto();

  void InitAsDefaultInstance();
  static ActivityCity* default_instance_;
};
// -------------------------------------------------------------------

class ActivityUser : public ::google::protobuf::Message {
 public:
  ActivityUser();
  virtual ~ActivityUser();

  ActivityUser(const ActivityUser& from);

  inline ActivityUser& operator=(const ActivityUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActivityUser& default_instance();

  void Swap(ActivityUser* other);

  // implements Message ----------------------------------------------

  ActivityUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActivityUser& from);
  void MergeFrom(const ActivityUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string ids = 2;
  inline int ids_size() const;
  inline void clear_ids();
  static const int kIdsFieldNumber = 2;
  inline const ::std::string& ids(int index) const;
  inline ::std::string* mutable_ids(int index);
  inline void set_ids(int index, const ::std::string& value);
  inline void set_ids(int index, const char* value);
  inline void set_ids(int index, const char* value, size_t size);
  inline ::std::string* add_ids();
  inline void add_ids(const ::std::string& value);
  inline void add_ids(const char* value);
  inline void add_ids(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ids();

  // @@protoc_insertion_point(class_scope:demoserver.ActivityUser)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> ids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_interface_2eproto();
  friend void protobuf_AssignDesc_interface_2eproto();
  friend void protobuf_ShutdownFile_interface_2eproto();

  void InitAsDefaultInstance();
  static ActivityUser* default_instance_;
};
// -------------------------------------------------------------------

class ActivityWeibo : public ::google::protobuf::Message {
 public:
  ActivityWeibo();
  virtual ~ActivityWeibo();

  ActivityWeibo(const ActivityWeibo& from);

  inline ActivityWeibo& operator=(const ActivityWeibo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActivityWeibo& default_instance();

  void Swap(ActivityWeibo* other);

  // implements Message ----------------------------------------------

  ActivityWeibo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActivityWeibo& from);
  void MergeFrom(const ActivityWeibo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required string weibo = 2;
  inline bool has_weibo() const;
  inline void clear_weibo();
  static const int kWeiboFieldNumber = 2;
  inline const ::std::string& weibo() const;
  inline void set_weibo(const ::std::string& value);
  inline void set_weibo(const char* value);
  inline void set_weibo(const char* value, size_t size);
  inline ::std::string* mutable_weibo();
  inline ::std::string* release_weibo();
  inline void set_allocated_weibo(::std::string* weibo);

  // @@protoc_insertion_point(class_scope:demoserver.ActivityWeibo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_weibo();
  inline void clear_has_weibo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::std::string* weibo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_interface_2eproto();
  friend void protobuf_AssignDesc_interface_2eproto();
  friend void protobuf_ShutdownFile_interface_2eproto();

  void InitAsDefaultInstance();
  static ActivityWeibo* default_instance_;
};
// -------------------------------------------------------------------

class ActivityCenterList : public ::google::protobuf::Message {
 public:
  ActivityCenterList();
  virtual ~ActivityCenterList();

  ActivityCenterList(const ActivityCenterList& from);

  inline ActivityCenterList& operator=(const ActivityCenterList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActivityCenterList& default_instance();

  void Swap(ActivityCenterList* other);

  // implements Message ----------------------------------------------

  ActivityCenterList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActivityCenterList& from);
  void MergeFrom(const ActivityCenterList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string activities = 1;
  inline int activities_size() const;
  inline void clear_activities();
  static const int kActivitiesFieldNumber = 1;
  inline const ::std::string& activities(int index) const;
  inline ::std::string* mutable_activities(int index);
  inline void set_activities(int index, const ::std::string& value);
  inline void set_activities(int index, const char* value);
  inline void set_activities(int index, const char* value, size_t size);
  inline ::std::string* add_activities();
  inline void add_activities(const ::std::string& value);
  inline void add_activities(const char* value);
  inline void add_activities(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& activities() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_activities();

  // @@protoc_insertion_point(class_scope:demoserver.ActivityCenterList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> activities_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_interface_2eproto();
  friend void protobuf_AssignDesc_interface_2eproto();
  friend void protobuf_ShutdownFile_interface_2eproto();

  void InitAsDefaultInstance();
  static ActivityCenterList* default_instance_;
};
// -------------------------------------------------------------------

class ActivityList : public ::google::protobuf::Message {
 public:
  ActivityList();
  virtual ~ActivityList();

  ActivityList(const ActivityList& from);

  inline ActivityList& operator=(const ActivityList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActivityList& default_instance();

  void Swap(ActivityList* other);

  // implements Message ----------------------------------------------

  ActivityList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActivityList& from);
  void MergeFrom(const ActivityList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sen = 1;
  inline bool has_sen() const;
  inline void clear_sen();
  static const int kSenFieldNumber = 1;
  inline const ::std::string& sen() const;
  inline void set_sen(const ::std::string& value);
  inline void set_sen(const char* value);
  inline void set_sen(const char* value, size_t size);
  inline ::std::string* mutable_sen();
  inline ::std::string* release_sen();
  inline void set_allocated_sen(::std::string* sen);

  // required double lat = 2;
  inline bool has_lat() const;
  inline void clear_lat();
  static const int kLatFieldNumber = 2;
  inline double lat() const;
  inline void set_lat(double value);

  // required double lng = 3;
  inline bool has_lng() const;
  inline void clear_lng();
  static const int kLngFieldNumber = 3;
  inline double lng() const;
  inline void set_lng(double value);

  // @@protoc_insertion_point(class_scope:demoserver.ActivityList)
 private:
  inline void set_has_sen();
  inline void clear_has_sen();
  inline void set_has_lat();
  inline void clear_has_lat();
  inline void set_has_lng();
  inline void clear_has_lng();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* sen_;
  double lat_;
  double lng_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_interface_2eproto();
  friend void protobuf_AssignDesc_interface_2eproto();
  friend void protobuf_ShutdownFile_interface_2eproto();

  void InitAsDefaultInstance();
  static ActivityList* default_instance_;
};
// -------------------------------------------------------------------

class ActivitySearchRequest : public ::google::protobuf::Message {
 public:
  ActivitySearchRequest();
  virtual ~ActivitySearchRequest();

  ActivitySearchRequest(const ActivitySearchRequest& from);

  inline ActivitySearchRequest& operator=(const ActivitySearchRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActivitySearchRequest& default_instance();

  void Swap(ActivitySearchRequest* other);

  // implements Message ----------------------------------------------

  ActivitySearchRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActivitySearchRequest& from);
  void MergeFrom(const ActivitySearchRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 offset = 2;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 2;
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // optional int32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:demoserver.ActivitySearchRequest)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 offset_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_interface_2eproto();
  friend void protobuf_AssignDesc_interface_2eproto();
  friend void protobuf_ShutdownFile_interface_2eproto();

  void InitAsDefaultInstance();
  static ActivitySearchRequest* default_instance_;
};
// -------------------------------------------------------------------

class ActivitySearchResponse : public ::google::protobuf::Message {
 public:
  ActivitySearchResponse();
  virtual ~ActivitySearchResponse();

  ActivitySearchResponse(const ActivitySearchResponse& from);

  inline ActivitySearchResponse& operator=(const ActivitySearchResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActivitySearchResponse& default_instance();

  void Swap(ActivitySearchResponse* other);

  // implements Message ----------------------------------------------

  ActivitySearchResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActivitySearchResponse& from);
  void MergeFrom(const ActivitySearchResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 total_count = 1;
  inline bool has_total_count() const;
  inline void clear_total_count();
  static const int kTotalCountFieldNumber = 1;
  inline ::google::protobuf::int32 total_count() const;
  inline void set_total_count(::google::protobuf::int32 value);

  // repeated .demoserver.ActivityEntity activities = 2;
  inline int activities_size() const;
  inline void clear_activities();
  static const int kActivitiesFieldNumber = 2;
  inline const ::demoserver::ActivityEntity& activities(int index) const;
  inline ::demoserver::ActivityEntity* mutable_activities(int index);
  inline ::demoserver::ActivityEntity* add_activities();
  inline const ::google::protobuf::RepeatedPtrField< ::demoserver::ActivityEntity >&
      activities() const;
  inline ::google::protobuf::RepeatedPtrField< ::demoserver::ActivityEntity >*
      mutable_activities();

  // repeated .demoserver.ActivitySimilar similars = 3;
  inline int similars_size() const;
  inline void clear_similars();
  static const int kSimilarsFieldNumber = 3;
  inline const ::demoserver::ActivitySimilar& similars(int index) const;
  inline ::demoserver::ActivitySimilar* mutable_similars(int index);
  inline ::demoserver::ActivitySimilar* add_similars();
  inline const ::google::protobuf::RepeatedPtrField< ::demoserver::ActivitySimilar >&
      similars() const;
  inline ::google::protobuf::RepeatedPtrField< ::demoserver::ActivitySimilar >*
      mutable_similars();

  // repeated .demoserver.ActivityCity cities = 4;
  inline int cities_size() const;
  inline void clear_cities();
  static const int kCitiesFieldNumber = 4;
  inline const ::demoserver::ActivityCity& cities(int index) const;
  inline ::demoserver::ActivityCity* mutable_cities(int index);
  inline ::demoserver::ActivityCity* add_cities();
  inline const ::google::protobuf::RepeatedPtrField< ::demoserver::ActivityCity >&
      cities() const;
  inline ::google::protobuf::RepeatedPtrField< ::demoserver::ActivityCity >*
      mutable_cities();

  // repeated .demoserver.ActivityUser users = 5;
  inline int users_size() const;
  inline void clear_users();
  static const int kUsersFieldNumber = 5;
  inline const ::demoserver::ActivityUser& users(int index) const;
  inline ::demoserver::ActivityUser* mutable_users(int index);
  inline ::demoserver::ActivityUser* add_users();
  inline const ::google::protobuf::RepeatedPtrField< ::demoserver::ActivityUser >&
      users() const;
  inline ::google::protobuf::RepeatedPtrField< ::demoserver::ActivityUser >*
      mutable_users();

  // repeated .demoserver.ActivityWeibo weibos = 6;
  inline int weibos_size() const;
  inline void clear_weibos();
  static const int kWeibosFieldNumber = 6;
  inline const ::demoserver::ActivityWeibo& weibos(int index) const;
  inline ::demoserver::ActivityWeibo* mutable_weibos(int index);
  inline ::demoserver::ActivityWeibo* add_weibos();
  inline const ::google::protobuf::RepeatedPtrField< ::demoserver::ActivityWeibo >&
      weibos() const;
  inline ::google::protobuf::RepeatedPtrField< ::demoserver::ActivityWeibo >*
      mutable_weibos();

  // repeated .demoserver.ActivityCenterList lists = 7;
  inline int lists_size() const;
  inline void clear_lists();
  static const int kListsFieldNumber = 7;
  inline const ::demoserver::ActivityCenterList& lists(int index) const;
  inline ::demoserver::ActivityCenterList* mutable_lists(int index);
  inline ::demoserver::ActivityCenterList* add_lists();
  inline const ::google::protobuf::RepeatedPtrField< ::demoserver::ActivityCenterList >&
      lists() const;
  inline ::google::protobuf::RepeatedPtrField< ::demoserver::ActivityCenterList >*
      mutable_lists();

  // repeated .demoserver.ActivityList actlists = 8;
  inline int actlists_size() const;
  inline void clear_actlists();
  static const int kActlistsFieldNumber = 8;
  inline const ::demoserver::ActivityList& actlists(int index) const;
  inline ::demoserver::ActivityList* mutable_actlists(int index);
  inline ::demoserver::ActivityList* add_actlists();
  inline const ::google::protobuf::RepeatedPtrField< ::demoserver::ActivityList >&
      actlists() const;
  inline ::google::protobuf::RepeatedPtrField< ::demoserver::ActivityList >*
      mutable_actlists();

  // @@protoc_insertion_point(class_scope:demoserver.ActivitySearchResponse)
 private:
  inline void set_has_total_count();
  inline void clear_has_total_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::demoserver::ActivityEntity > activities_;
  ::google::protobuf::RepeatedPtrField< ::demoserver::ActivitySimilar > similars_;
  ::google::protobuf::RepeatedPtrField< ::demoserver::ActivityCity > cities_;
  ::google::protobuf::RepeatedPtrField< ::demoserver::ActivityUser > users_;
  ::google::protobuf::RepeatedPtrField< ::demoserver::ActivityWeibo > weibos_;
  ::google::protobuf::RepeatedPtrField< ::demoserver::ActivityCenterList > lists_;
  ::google::protobuf::RepeatedPtrField< ::demoserver::ActivityList > actlists_;
  ::google::protobuf::int32 total_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_interface_2eproto();
  friend void protobuf_AssignDesc_interface_2eproto();
  friend void protobuf_ShutdownFile_interface_2eproto();

  void InitAsDefaultInstance();
  static ActivitySearchResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// EntitySearchRequest

// required string dataset = 1;
inline bool EntitySearchRequest::has_dataset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EntitySearchRequest::set_has_dataset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EntitySearchRequest::clear_has_dataset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EntitySearchRequest::clear_dataset() {
  if (dataset_ != &::google::protobuf::internal::kEmptyString) {
    dataset_->clear();
  }
  clear_has_dataset();
}
inline const ::std::string& EntitySearchRequest::dataset() const {
  return *dataset_;
}
inline void EntitySearchRequest::set_dataset(const ::std::string& value) {
  set_has_dataset();
  if (dataset_ == &::google::protobuf::internal::kEmptyString) {
    dataset_ = new ::std::string;
  }
  dataset_->assign(value);
}
inline void EntitySearchRequest::set_dataset(const char* value) {
  set_has_dataset();
  if (dataset_ == &::google::protobuf::internal::kEmptyString) {
    dataset_ = new ::std::string;
  }
  dataset_->assign(value);
}
inline void EntitySearchRequest::set_dataset(const char* value, size_t size) {
  set_has_dataset();
  if (dataset_ == &::google::protobuf::internal::kEmptyString) {
    dataset_ = new ::std::string;
  }
  dataset_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EntitySearchRequest::mutable_dataset() {
  set_has_dataset();
  if (dataset_ == &::google::protobuf::internal::kEmptyString) {
    dataset_ = new ::std::string;
  }
  return dataset_;
}
inline ::std::string* EntitySearchRequest::release_dataset() {
  clear_has_dataset();
  if (dataset_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dataset_;
    dataset_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EntitySearchRequest::set_allocated_dataset(::std::string* dataset) {
  if (dataset_ != &::google::protobuf::internal::kEmptyString) {
    delete dataset_;
  }
  if (dataset) {
    set_has_dataset();
    dataset_ = dataset;
  } else {
    clear_has_dataset();
    dataset_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string query = 2;
inline bool EntitySearchRequest::has_query() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EntitySearchRequest::set_has_query() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EntitySearchRequest::clear_has_query() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EntitySearchRequest::clear_query() {
  if (query_ != &::google::protobuf::internal::kEmptyString) {
    query_->clear();
  }
  clear_has_query();
}
inline const ::std::string& EntitySearchRequest::query() const {
  return *query_;
}
inline void EntitySearchRequest::set_query(const ::std::string& value) {
  set_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    query_ = new ::std::string;
  }
  query_->assign(value);
}
inline void EntitySearchRequest::set_query(const char* value) {
  set_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    query_ = new ::std::string;
  }
  query_->assign(value);
}
inline void EntitySearchRequest::set_query(const char* value, size_t size) {
  set_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    query_ = new ::std::string;
  }
  query_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EntitySearchRequest::mutable_query() {
  set_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    query_ = new ::std::string;
  }
  return query_;
}
inline ::std::string* EntitySearchRequest::release_query() {
  clear_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = query_;
    query_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EntitySearchRequest::set_allocated_query(::std::string* query) {
  if (query_ != &::google::protobuf::internal::kEmptyString) {
    delete query_;
  }
  if (query) {
    set_has_query();
    query_ = query;
  } else {
    clear_has_query();
    query_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 offset = 3;
inline bool EntitySearchRequest::has_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EntitySearchRequest::set_has_offset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EntitySearchRequest::clear_has_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EntitySearchRequest::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 EntitySearchRequest::offset() const {
  return offset_;
}
inline void EntitySearchRequest::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
}

// optional int32 count = 4;
inline bool EntitySearchRequest::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EntitySearchRequest::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EntitySearchRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EntitySearchRequest::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 EntitySearchRequest::count() const {
  return count_;
}
inline void EntitySearchRequest::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// EntityDetailRequest

// required string dataset = 1;
inline bool EntityDetailRequest::has_dataset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EntityDetailRequest::set_has_dataset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EntityDetailRequest::clear_has_dataset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EntityDetailRequest::clear_dataset() {
  if (dataset_ != &::google::protobuf::internal::kEmptyString) {
    dataset_->clear();
  }
  clear_has_dataset();
}
inline const ::std::string& EntityDetailRequest::dataset() const {
  return *dataset_;
}
inline void EntityDetailRequest::set_dataset(const ::std::string& value) {
  set_has_dataset();
  if (dataset_ == &::google::protobuf::internal::kEmptyString) {
    dataset_ = new ::std::string;
  }
  dataset_->assign(value);
}
inline void EntityDetailRequest::set_dataset(const char* value) {
  set_has_dataset();
  if (dataset_ == &::google::protobuf::internal::kEmptyString) {
    dataset_ = new ::std::string;
  }
  dataset_->assign(value);
}
inline void EntityDetailRequest::set_dataset(const char* value, size_t size) {
  set_has_dataset();
  if (dataset_ == &::google::protobuf::internal::kEmptyString) {
    dataset_ = new ::std::string;
  }
  dataset_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EntityDetailRequest::mutable_dataset() {
  set_has_dataset();
  if (dataset_ == &::google::protobuf::internal::kEmptyString) {
    dataset_ = new ::std::string;
  }
  return dataset_;
}
inline ::std::string* EntityDetailRequest::release_dataset() {
  clear_has_dataset();
  if (dataset_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dataset_;
    dataset_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EntityDetailRequest::set_allocated_dataset(::std::string* dataset) {
  if (dataset_ != &::google::protobuf::internal::kEmptyString) {
    delete dataset_;
  }
  if (dataset) {
    set_has_dataset();
    dataset_ = dataset;
  } else {
    clear_has_dataset();
    dataset_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int32 id = 2;
inline int EntityDetailRequest::id_size() const {
  return id_.size();
}
inline void EntityDetailRequest::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::int32 EntityDetailRequest::id(int index) const {
  return id_.Get(index);
}
inline void EntityDetailRequest::set_id(int index, ::google::protobuf::int32 value) {
  id_.Set(index, value);
}
inline void EntityDetailRequest::add_id(::google::protobuf::int32 value) {
  id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
EntityDetailRequest::id() const {
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
EntityDetailRequest::mutable_id() {
  return &id_;
}

// -------------------------------------------------------------------

// Stat

// required string type = 1;
inline bool Stat::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Stat::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Stat::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Stat::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& Stat::type() const {
  return *type_;
}
inline void Stat::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void Stat::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void Stat::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Stat::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* Stat::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Stat::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 value = 2;
inline bool Stat::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Stat::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Stat::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Stat::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 Stat::value() const {
  return value_;
}
inline void Stat::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// RelatedEntity

// required string type = 1;
inline bool RelatedEntity::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RelatedEntity::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RelatedEntity::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RelatedEntity::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& RelatedEntity::type() const {
  return *type_;
}
inline void RelatedEntity::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void RelatedEntity::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void RelatedEntity::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RelatedEntity::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* RelatedEntity::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RelatedEntity::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int32 id = 2;
inline int RelatedEntity::id_size() const {
  return id_.size();
}
inline void RelatedEntity::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::int32 RelatedEntity::id(int index) const {
  return id_.Get(index);
}
inline void RelatedEntity::set_id(int index, ::google::protobuf::int32 value) {
  id_.Set(index, value);
}
inline void RelatedEntity::add_id(::google::protobuf::int32 value) {
  id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RelatedEntity::id() const {
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RelatedEntity::mutable_id() {
  return &id_;
}

// -------------------------------------------------------------------

// DetailedEntity

// required string title = 1;
inline bool DetailedEntity::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DetailedEntity::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DetailedEntity::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DetailedEntity::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& DetailedEntity::title() const {
  return *title_;
}
inline void DetailedEntity::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void DetailedEntity::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void DetailedEntity::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DetailedEntity::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* DetailedEntity::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DetailedEntity::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 id = 2;
inline bool DetailedEntity::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DetailedEntity::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DetailedEntity::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DetailedEntity::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 DetailedEntity::id() const {
  return id_;
}
inline void DetailedEntity::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string url = 3;
inline bool DetailedEntity::has_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DetailedEntity::set_has_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DetailedEntity::clear_has_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DetailedEntity::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& DetailedEntity::url() const {
  return *url_;
}
inline void DetailedEntity::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void DetailedEntity::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void DetailedEntity::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DetailedEntity::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* DetailedEntity::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DetailedEntity::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string description = 4;
inline bool DetailedEntity::has_description() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DetailedEntity::set_has_description() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DetailedEntity::clear_has_description() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DetailedEntity::clear_description() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& DetailedEntity::description() const {
  return *description_;
}
inline void DetailedEntity::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void DetailedEntity::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void DetailedEntity::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DetailedEntity::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  return description_;
}
inline ::std::string* DetailedEntity::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DetailedEntity::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .demoserver.Stat stat = 5;
inline int DetailedEntity::stat_size() const {
  return stat_.size();
}
inline void DetailedEntity::clear_stat() {
  stat_.Clear();
}
inline const ::demoserver::Stat& DetailedEntity::stat(int index) const {
  return stat_.Get(index);
}
inline ::demoserver::Stat* DetailedEntity::mutable_stat(int index) {
  return stat_.Mutable(index);
}
inline ::demoserver::Stat* DetailedEntity::add_stat() {
  return stat_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::demoserver::Stat >&
DetailedEntity::stat() const {
  return stat_;
}
inline ::google::protobuf::RepeatedPtrField< ::demoserver::Stat >*
DetailedEntity::mutable_stat() {
  return &stat_;
}

// optional string topics = 6;
inline bool DetailedEntity::has_topics() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DetailedEntity::set_has_topics() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DetailedEntity::clear_has_topics() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DetailedEntity::clear_topics() {
  if (topics_ != &::google::protobuf::internal::kEmptyString) {
    topics_->clear();
  }
  clear_has_topics();
}
inline const ::std::string& DetailedEntity::topics() const {
  return *topics_;
}
inline void DetailedEntity::set_topics(const ::std::string& value) {
  set_has_topics();
  if (topics_ == &::google::protobuf::internal::kEmptyString) {
    topics_ = new ::std::string;
  }
  topics_->assign(value);
}
inline void DetailedEntity::set_topics(const char* value) {
  set_has_topics();
  if (topics_ == &::google::protobuf::internal::kEmptyString) {
    topics_ = new ::std::string;
  }
  topics_->assign(value);
}
inline void DetailedEntity::set_topics(const char* value, size_t size) {
  set_has_topics();
  if (topics_ == &::google::protobuf::internal::kEmptyString) {
    topics_ = new ::std::string;
  }
  topics_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DetailedEntity::mutable_topics() {
  set_has_topics();
  if (topics_ == &::google::protobuf::internal::kEmptyString) {
    topics_ = new ::std::string;
  }
  return topics_;
}
inline ::std::string* DetailedEntity::release_topics() {
  clear_has_topics();
  if (topics_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = topics_;
    topics_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DetailedEntity::set_allocated_topics(::std::string* topics) {
  if (topics_ != &::google::protobuf::internal::kEmptyString) {
    delete topics_;
  }
  if (topics) {
    set_has_topics();
    topics_ = topics;
  } else {
    clear_has_topics();
    topics_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string imgurl = 7;
inline bool DetailedEntity::has_imgurl() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DetailedEntity::set_has_imgurl() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DetailedEntity::clear_has_imgurl() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DetailedEntity::clear_imgurl() {
  if (imgurl_ != &::google::protobuf::internal::kEmptyString) {
    imgurl_->clear();
  }
  clear_has_imgurl();
}
inline const ::std::string& DetailedEntity::imgurl() const {
  return *imgurl_;
}
inline void DetailedEntity::set_imgurl(const ::std::string& value) {
  set_has_imgurl();
  if (imgurl_ == &::google::protobuf::internal::kEmptyString) {
    imgurl_ = new ::std::string;
  }
  imgurl_->assign(value);
}
inline void DetailedEntity::set_imgurl(const char* value) {
  set_has_imgurl();
  if (imgurl_ == &::google::protobuf::internal::kEmptyString) {
    imgurl_ = new ::std::string;
  }
  imgurl_->assign(value);
}
inline void DetailedEntity::set_imgurl(const char* value, size_t size) {
  set_has_imgurl();
  if (imgurl_ == &::google::protobuf::internal::kEmptyString) {
    imgurl_ = new ::std::string;
  }
  imgurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DetailedEntity::mutable_imgurl() {
  set_has_imgurl();
  if (imgurl_ == &::google::protobuf::internal::kEmptyString) {
    imgurl_ = new ::std::string;
  }
  return imgurl_;
}
inline ::std::string* DetailedEntity::release_imgurl() {
  clear_has_imgurl();
  if (imgurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = imgurl_;
    imgurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DetailedEntity::set_allocated_imgurl(::std::string* imgurl) {
  if (imgurl_ != &::google::protobuf::internal::kEmptyString) {
    delete imgurl_;
  }
  if (imgurl) {
    set_has_imgurl();
    imgurl_ = imgurl;
  } else {
    clear_has_imgurl();
    imgurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 original_id = 8;
inline bool DetailedEntity::has_original_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DetailedEntity::set_has_original_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DetailedEntity::clear_has_original_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DetailedEntity::clear_original_id() {
  original_id_ = 0;
  clear_has_original_id();
}
inline ::google::protobuf::int32 DetailedEntity::original_id() const {
  return original_id_;
}
inline void DetailedEntity::set_original_id(::google::protobuf::int32 value) {
  set_has_original_id();
  original_id_ = value;
}

// repeated .demoserver.RelatedEntity related_entity = 9;
inline int DetailedEntity::related_entity_size() const {
  return related_entity_.size();
}
inline void DetailedEntity::clear_related_entity() {
  related_entity_.Clear();
}
inline const ::demoserver::RelatedEntity& DetailedEntity::related_entity(int index) const {
  return related_entity_.Get(index);
}
inline ::demoserver::RelatedEntity* DetailedEntity::mutable_related_entity(int index) {
  return related_entity_.Mutable(index);
}
inline ::demoserver::RelatedEntity* DetailedEntity::add_related_entity() {
  return related_entity_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::demoserver::RelatedEntity >&
DetailedEntity::related_entity() const {
  return related_entity_;
}
inline ::google::protobuf::RepeatedPtrField< ::demoserver::RelatedEntity >*
DetailedEntity::mutable_related_entity() {
  return &related_entity_;
}

// -------------------------------------------------------------------

// EntitySearchResponse

// required string query = 1;
inline bool EntitySearchResponse::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EntitySearchResponse::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EntitySearchResponse::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EntitySearchResponse::clear_query() {
  if (query_ != &::google::protobuf::internal::kEmptyString) {
    query_->clear();
  }
  clear_has_query();
}
inline const ::std::string& EntitySearchResponse::query() const {
  return *query_;
}
inline void EntitySearchResponse::set_query(const ::std::string& value) {
  set_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    query_ = new ::std::string;
  }
  query_->assign(value);
}
inline void EntitySearchResponse::set_query(const char* value) {
  set_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    query_ = new ::std::string;
  }
  query_->assign(value);
}
inline void EntitySearchResponse::set_query(const char* value, size_t size) {
  set_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    query_ = new ::std::string;
  }
  query_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EntitySearchResponse::mutable_query() {
  set_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    query_ = new ::std::string;
  }
  return query_;
}
inline ::std::string* EntitySearchResponse::release_query() {
  clear_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = query_;
    query_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EntitySearchResponse::set_allocated_query(::std::string* query) {
  if (query_ != &::google::protobuf::internal::kEmptyString) {
    delete query_;
  }
  if (query) {
    set_has_query();
    query_ = query;
  } else {
    clear_has_query();
    query_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 total_count = 2;
inline bool EntitySearchResponse::has_total_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EntitySearchResponse::set_has_total_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EntitySearchResponse::clear_has_total_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EntitySearchResponse::clear_total_count() {
  total_count_ = 0;
  clear_has_total_count();
}
inline ::google::protobuf::int32 EntitySearchResponse::total_count() const {
  return total_count_;
}
inline void EntitySearchResponse::set_total_count(::google::protobuf::int32 value) {
  set_has_total_count();
  total_count_ = value;
}

// repeated .demoserver.DetailedEntity entity = 3;
inline int EntitySearchResponse::entity_size() const {
  return entity_.size();
}
inline void EntitySearchResponse::clear_entity() {
  entity_.Clear();
}
inline const ::demoserver::DetailedEntity& EntitySearchResponse::entity(int index) const {
  return entity_.Get(index);
}
inline ::demoserver::DetailedEntity* EntitySearchResponse::mutable_entity(int index) {
  return entity_.Mutable(index);
}
inline ::demoserver::DetailedEntity* EntitySearchResponse::add_entity() {
  return entity_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::demoserver::DetailedEntity >&
EntitySearchResponse::entity() const {
  return entity_;
}
inline ::google::protobuf::RepeatedPtrField< ::demoserver::DetailedEntity >*
EntitySearchResponse::mutable_entity() {
  return &entity_;
}

// -------------------------------------------------------------------

// Influence

// required int32 id = 1;
inline bool Influence::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Influence::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Influence::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Influence::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Influence::id() const {
  return id_;
}
inline void Influence::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 topic = 2;
inline bool Influence::has_topic() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Influence::set_has_topic() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Influence::clear_has_topic() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Influence::clear_topic() {
  topic_ = 0;
  clear_has_topic();
}
inline ::google::protobuf::int32 Influence::topic() const {
  return topic_;
}
inline void Influence::set_topic(::google::protobuf::int32 value) {
  set_has_topic();
  topic_ = value;
}

// required double score = 3;
inline bool Influence::has_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Influence::set_has_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Influence::clear_has_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Influence::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline double Influence::score() const {
  return score_;
}
inline void Influence::set_score(double value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// InfluenceSearchResponse

// required int32 entity_id = 1;
inline bool InfluenceSearchResponse::has_entity_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InfluenceSearchResponse::set_has_entity_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InfluenceSearchResponse::clear_has_entity_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InfluenceSearchResponse::clear_entity_id() {
  entity_id_ = 0;
  clear_has_entity_id();
}
inline ::google::protobuf::int32 InfluenceSearchResponse::entity_id() const {
  return entity_id_;
}
inline void InfluenceSearchResponse::set_entity_id(::google::protobuf::int32 value) {
  set_has_entity_id();
  entity_id_ = value;
}

// repeated .demoserver.Influence influence = 2;
inline int InfluenceSearchResponse::influence_size() const {
  return influence_.size();
}
inline void InfluenceSearchResponse::clear_influence() {
  influence_.Clear();
}
inline const ::demoserver::Influence& InfluenceSearchResponse::influence(int index) const {
  return influence_.Get(index);
}
inline ::demoserver::Influence* InfluenceSearchResponse::mutable_influence(int index) {
  return influence_.Mutable(index);
}
inline ::demoserver::Influence* InfluenceSearchResponse::add_influence() {
  return influence_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::demoserver::Influence >&
InfluenceSearchResponse::influence() const {
  return influence_;
}
inline ::google::protobuf::RepeatedPtrField< ::demoserver::Influence >*
InfluenceSearchResponse::mutable_influence() {
  return &influence_;
}

// repeated .demoserver.Influence influenced_by = 3;
inline int InfluenceSearchResponse::influenced_by_size() const {
  return influenced_by_.size();
}
inline void InfluenceSearchResponse::clear_influenced_by() {
  influenced_by_.Clear();
}
inline const ::demoserver::Influence& InfluenceSearchResponse::influenced_by(int index) const {
  return influenced_by_.Get(index);
}
inline ::demoserver::Influence* InfluenceSearchResponse::mutable_influenced_by(int index) {
  return influenced_by_.Mutable(index);
}
inline ::demoserver::Influence* InfluenceSearchResponse::add_influenced_by() {
  return influenced_by_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::demoserver::Influence >&
InfluenceSearchResponse::influenced_by() const {
  return influenced_by_;
}
inline ::google::protobuf::RepeatedPtrField< ::demoserver::Influence >*
InfluenceSearchResponse::mutable_influenced_by() {
  return &influenced_by_;
}

// -------------------------------------------------------------------

// ActivityPoint

// required double lat = 1;
inline bool ActivityPoint::has_lat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityPoint::set_has_lat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActivityPoint::clear_has_lat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActivityPoint::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
inline double ActivityPoint::lat() const {
  return lat_;
}
inline void ActivityPoint::set_lat(double value) {
  set_has_lat();
  lat_ = value;
}

// required double lng = 2;
inline bool ActivityPoint::has_lng() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivityPoint::set_has_lng() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActivityPoint::clear_has_lng() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActivityPoint::clear_lng() {
  lng_ = 0;
  clear_has_lng();
}
inline double ActivityPoint::lng() const {
  return lng_;
}
inline void ActivityPoint::set_lng(double value) {
  set_has_lng();
  lng_ = value;
}

// -------------------------------------------------------------------

// ActivityPOI

// required string id = 1;
inline bool ActivityPOI::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityPOI::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActivityPOI::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActivityPOI::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& ActivityPOI::id() const {
  return *id_;
}
inline void ActivityPOI::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void ActivityPOI::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void ActivityPOI::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ActivityPOI::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* ActivityPOI::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ActivityPOI::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string name = 2;
inline bool ActivityPOI::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivityPOI::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActivityPOI::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActivityPOI::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ActivityPOI::name() const {
  return *name_;
}
inline void ActivityPOI::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ActivityPOI::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ActivityPOI::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ActivityPOI::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ActivityPOI::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ActivityPOI::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string type = 3;
inline bool ActivityPOI::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActivityPOI::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActivityPOI::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActivityPOI::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& ActivityPOI::type() const {
  return *type_;
}
inline void ActivityPOI::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void ActivityPOI::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void ActivityPOI::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ActivityPOI::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* ActivityPOI::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ActivityPOI::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string city = 4;
inline bool ActivityPOI::has_city() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ActivityPOI::set_has_city() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ActivityPOI::clear_has_city() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ActivityPOI::clear_city() {
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    city_->clear();
  }
  clear_has_city();
}
inline const ::std::string& ActivityPOI::city() const {
  return *city_;
}
inline void ActivityPOI::set_city(const ::std::string& value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(value);
}
inline void ActivityPOI::set_city(const char* value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(value);
}
inline void ActivityPOI::set_city(const char* value, size_t size) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ActivityPOI::mutable_city() {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  return city_;
}
inline ::std::string* ActivityPOI::release_city() {
  clear_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = city_;
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ActivityPOI::set_allocated_city(::std::string* city) {
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    delete city_;
  }
  if (city) {
    set_has_city();
    city_ = city;
  } else {
    clear_has_city();
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required double lat = 5;
inline bool ActivityPOI::has_lat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ActivityPOI::set_has_lat() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ActivityPOI::clear_has_lat() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ActivityPOI::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
inline double ActivityPOI::lat() const {
  return lat_;
}
inline void ActivityPOI::set_lat(double value) {
  set_has_lat();
  lat_ = value;
}

// required double lng = 6;
inline bool ActivityPOI::has_lng() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ActivityPOI::set_has_lng() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ActivityPOI::clear_has_lng() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ActivityPOI::clear_lng() {
  lng_ = 0;
  clear_has_lng();
}
inline double ActivityPOI::lng() const {
  return lng_;
}
inline void ActivityPOI::set_lng(double value) {
  set_has_lng();
  lng_ = value;
}

// -------------------------------------------------------------------

// ActivityNext

// required string name = 1;
inline bool ActivityNext::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityNext::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActivityNext::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActivityNext::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ActivityNext::name() const {
  return *name_;
}
inline void ActivityNext::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ActivityNext::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ActivityNext::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ActivityNext::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ActivityNext::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ActivityNext::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required double duration = 2;
inline bool ActivityNext::has_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivityNext::set_has_duration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActivityNext::clear_has_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActivityNext::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline double ActivityNext::duration() const {
  return duration_;
}
inline void ActivityNext::set_duration(double value) {
  set_has_duration();
  duration_ = value;
}

// -------------------------------------------------------------------

// ActivityEntity

// required string name = 1;
inline bool ActivityEntity::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityEntity::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActivityEntity::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActivityEntity::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ActivityEntity::name() const {
  return *name_;
}
inline void ActivityEntity::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ActivityEntity::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ActivityEntity::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ActivityEntity::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ActivityEntity::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ActivityEntity::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string verb = 2;
inline bool ActivityEntity::has_verb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivityEntity::set_has_verb() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActivityEntity::clear_has_verb() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActivityEntity::clear_verb() {
  if (verb_ != &::google::protobuf::internal::kEmptyString) {
    verb_->clear();
  }
  clear_has_verb();
}
inline const ::std::string& ActivityEntity::verb() const {
  return *verb_;
}
inline void ActivityEntity::set_verb(const ::std::string& value) {
  set_has_verb();
  if (verb_ == &::google::protobuf::internal::kEmptyString) {
    verb_ = new ::std::string;
  }
  verb_->assign(value);
}
inline void ActivityEntity::set_verb(const char* value) {
  set_has_verb();
  if (verb_ == &::google::protobuf::internal::kEmptyString) {
    verb_ = new ::std::string;
  }
  verb_->assign(value);
}
inline void ActivityEntity::set_verb(const char* value, size_t size) {
  set_has_verb();
  if (verb_ == &::google::protobuf::internal::kEmptyString) {
    verb_ = new ::std::string;
  }
  verb_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ActivityEntity::mutable_verb() {
  set_has_verb();
  if (verb_ == &::google::protobuf::internal::kEmptyString) {
    verb_ = new ::std::string;
  }
  return verb_;
}
inline ::std::string* ActivityEntity::release_verb() {
  clear_has_verb();
  if (verb_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = verb_;
    verb_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ActivityEntity::set_allocated_verb(::std::string* verb) {
  if (verb_ != &::google::protobuf::internal::kEmptyString) {
    delete verb_;
  }
  if (verb) {
    set_has_verb();
    verb_ = verb;
  } else {
    clear_has_verb();
    verb_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string object = 3;
inline bool ActivityEntity::has_object() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActivityEntity::set_has_object() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActivityEntity::clear_has_object() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActivityEntity::clear_object() {
  if (object_ != &::google::protobuf::internal::kEmptyString) {
    object_->clear();
  }
  clear_has_object();
}
inline const ::std::string& ActivityEntity::object() const {
  return *object_;
}
inline void ActivityEntity::set_object(const ::std::string& value) {
  set_has_object();
  if (object_ == &::google::protobuf::internal::kEmptyString) {
    object_ = new ::std::string;
  }
  object_->assign(value);
}
inline void ActivityEntity::set_object(const char* value) {
  set_has_object();
  if (object_ == &::google::protobuf::internal::kEmptyString) {
    object_ = new ::std::string;
  }
  object_->assign(value);
}
inline void ActivityEntity::set_object(const char* value, size_t size) {
  set_has_object();
  if (object_ == &::google::protobuf::internal::kEmptyString) {
    object_ = new ::std::string;
  }
  object_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ActivityEntity::mutable_object() {
  set_has_object();
  if (object_ == &::google::protobuf::internal::kEmptyString) {
    object_ = new ::std::string;
  }
  return object_;
}
inline ::std::string* ActivityEntity::release_object() {
  clear_has_object();
  if (object_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = object_;
    object_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ActivityEntity::set_allocated_object(::std::string* object) {
  if (object_ != &::google::protobuf::internal::kEmptyString) {
    delete object_;
  }
  if (object) {
    set_has_object();
    object_ = object;
  } else {
    clear_has_object();
    object_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated double wordvector = 4;
inline int ActivityEntity::wordvector_size() const {
  return wordvector_.size();
}
inline void ActivityEntity::clear_wordvector() {
  wordvector_.Clear();
}
inline double ActivityEntity::wordvector(int index) const {
  return wordvector_.Get(index);
}
inline void ActivityEntity::set_wordvector(int index, double value) {
  wordvector_.Set(index, value);
}
inline void ActivityEntity::add_wordvector(double value) {
  wordvector_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
ActivityEntity::wordvector() const {
  return wordvector_;
}
inline ::google::protobuf::RepeatedField< double >*
ActivityEntity::mutable_wordvector() {
  return &wordvector_;
}

// repeated .demoserver.ActivityPoint points = 5;
inline int ActivityEntity::points_size() const {
  return points_.size();
}
inline void ActivityEntity::clear_points() {
  points_.Clear();
}
inline const ::demoserver::ActivityPoint& ActivityEntity::points(int index) const {
  return points_.Get(index);
}
inline ::demoserver::ActivityPoint* ActivityEntity::mutable_points(int index) {
  return points_.Mutable(index);
}
inline ::demoserver::ActivityPoint* ActivityEntity::add_points() {
  return points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::demoserver::ActivityPoint >&
ActivityEntity::points() const {
  return points_;
}
inline ::google::protobuf::RepeatedPtrField< ::demoserver::ActivityPoint >*
ActivityEntity::mutable_points() {
  return &points_;
}

// repeated .demoserver.ActivityPOI pois = 6;
inline int ActivityEntity::pois_size() const {
  return pois_.size();
}
inline void ActivityEntity::clear_pois() {
  pois_.Clear();
}
inline const ::demoserver::ActivityPOI& ActivityEntity::pois(int index) const {
  return pois_.Get(index);
}
inline ::demoserver::ActivityPOI* ActivityEntity::mutable_pois(int index) {
  return pois_.Mutable(index);
}
inline ::demoserver::ActivityPOI* ActivityEntity::add_pois() {
  return pois_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::demoserver::ActivityPOI >&
ActivityEntity::pois() const {
  return pois_;
}
inline ::google::protobuf::RepeatedPtrField< ::demoserver::ActivityPOI >*
ActivityEntity::mutable_pois() {
  return &pois_;
}

// repeated int64 timestamps = 7;
inline int ActivityEntity::timestamps_size() const {
  return timestamps_.size();
}
inline void ActivityEntity::clear_timestamps() {
  timestamps_.Clear();
}
inline ::google::protobuf::int64 ActivityEntity::timestamps(int index) const {
  return timestamps_.Get(index);
}
inline void ActivityEntity::set_timestamps(int index, ::google::protobuf::int64 value) {
  timestamps_.Set(index, value);
}
inline void ActivityEntity::add_timestamps(::google::protobuf::int64 value) {
  timestamps_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ActivityEntity::timestamps() const {
  return timestamps_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ActivityEntity::mutable_timestamps() {
  return &timestamps_;
}

// repeated .demoserver.ActivityNext nextpoints = 8;
inline int ActivityEntity::nextpoints_size() const {
  return nextpoints_.size();
}
inline void ActivityEntity::clear_nextpoints() {
  nextpoints_.Clear();
}
inline const ::demoserver::ActivityNext& ActivityEntity::nextpoints(int index) const {
  return nextpoints_.Get(index);
}
inline ::demoserver::ActivityNext* ActivityEntity::mutable_nextpoints(int index) {
  return nextpoints_.Mutable(index);
}
inline ::demoserver::ActivityNext* ActivityEntity::add_nextpoints() {
  return nextpoints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::demoserver::ActivityNext >&
ActivityEntity::nextpoints() const {
  return nextpoints_;
}
inline ::google::protobuf::RepeatedPtrField< ::demoserver::ActivityNext >*
ActivityEntity::mutable_nextpoints() {
  return &nextpoints_;
}

// -------------------------------------------------------------------

// ActivitySimilar

// required string name = 1;
inline bool ActivitySimilar::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivitySimilar::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActivitySimilar::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActivitySimilar::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ActivitySimilar::name() const {
  return *name_;
}
inline void ActivitySimilar::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ActivitySimilar::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ActivitySimilar::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ActivitySimilar::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ActivitySimilar::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ActivitySimilar::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required double sim = 2;
inline bool ActivitySimilar::has_sim() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivitySimilar::set_has_sim() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActivitySimilar::clear_has_sim() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActivitySimilar::clear_sim() {
  sim_ = 0;
  clear_has_sim();
}
inline double ActivitySimilar::sim() const {
  return sim_;
}
inline void ActivitySimilar::set_sim(double value) {
  set_has_sim();
  sim_ = value;
}

// -------------------------------------------------------------------

// ActivityCity

// required string name = 1;
inline bool ActivityCity::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityCity::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActivityCity::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActivityCity::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ActivityCity::name() const {
  return *name_;
}
inline void ActivityCity::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ActivityCity::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ActivityCity::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ActivityCity::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ActivityCity::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ActivityCity::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string activity = 2;
inline int ActivityCity::activity_size() const {
  return activity_.size();
}
inline void ActivityCity::clear_activity() {
  activity_.Clear();
}
inline const ::std::string& ActivityCity::activity(int index) const {
  return activity_.Get(index);
}
inline ::std::string* ActivityCity::mutable_activity(int index) {
  return activity_.Mutable(index);
}
inline void ActivityCity::set_activity(int index, const ::std::string& value) {
  activity_.Mutable(index)->assign(value);
}
inline void ActivityCity::set_activity(int index, const char* value) {
  activity_.Mutable(index)->assign(value);
}
inline void ActivityCity::set_activity(int index, const char* value, size_t size) {
  activity_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ActivityCity::add_activity() {
  return activity_.Add();
}
inline void ActivityCity::add_activity(const ::std::string& value) {
  activity_.Add()->assign(value);
}
inline void ActivityCity::add_activity(const char* value) {
  activity_.Add()->assign(value);
}
inline void ActivityCity::add_activity(const char* value, size_t size) {
  activity_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ActivityCity::activity() const {
  return activity_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ActivityCity::mutable_activity() {
  return &activity_;
}

// -------------------------------------------------------------------

// ActivityUser

// repeated string ids = 2;
inline int ActivityUser::ids_size() const {
  return ids_.size();
}
inline void ActivityUser::clear_ids() {
  ids_.Clear();
}
inline const ::std::string& ActivityUser::ids(int index) const {
  return ids_.Get(index);
}
inline ::std::string* ActivityUser::mutable_ids(int index) {
  return ids_.Mutable(index);
}
inline void ActivityUser::set_ids(int index, const ::std::string& value) {
  ids_.Mutable(index)->assign(value);
}
inline void ActivityUser::set_ids(int index, const char* value) {
  ids_.Mutable(index)->assign(value);
}
inline void ActivityUser::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ActivityUser::add_ids() {
  return ids_.Add();
}
inline void ActivityUser::add_ids(const ::std::string& value) {
  ids_.Add()->assign(value);
}
inline void ActivityUser::add_ids(const char* value) {
  ids_.Add()->assign(value);
}
inline void ActivityUser::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ActivityUser::ids() const {
  return ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ActivityUser::mutable_ids() {
  return &ids_;
}

// -------------------------------------------------------------------

// ActivityWeibo

// required string id = 1;
inline bool ActivityWeibo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityWeibo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActivityWeibo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActivityWeibo::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& ActivityWeibo::id() const {
  return *id_;
}
inline void ActivityWeibo::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void ActivityWeibo::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void ActivityWeibo::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ActivityWeibo::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* ActivityWeibo::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ActivityWeibo::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string weibo = 2;
inline bool ActivityWeibo::has_weibo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivityWeibo::set_has_weibo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActivityWeibo::clear_has_weibo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActivityWeibo::clear_weibo() {
  if (weibo_ != &::google::protobuf::internal::kEmptyString) {
    weibo_->clear();
  }
  clear_has_weibo();
}
inline const ::std::string& ActivityWeibo::weibo() const {
  return *weibo_;
}
inline void ActivityWeibo::set_weibo(const ::std::string& value) {
  set_has_weibo();
  if (weibo_ == &::google::protobuf::internal::kEmptyString) {
    weibo_ = new ::std::string;
  }
  weibo_->assign(value);
}
inline void ActivityWeibo::set_weibo(const char* value) {
  set_has_weibo();
  if (weibo_ == &::google::protobuf::internal::kEmptyString) {
    weibo_ = new ::std::string;
  }
  weibo_->assign(value);
}
inline void ActivityWeibo::set_weibo(const char* value, size_t size) {
  set_has_weibo();
  if (weibo_ == &::google::protobuf::internal::kEmptyString) {
    weibo_ = new ::std::string;
  }
  weibo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ActivityWeibo::mutable_weibo() {
  set_has_weibo();
  if (weibo_ == &::google::protobuf::internal::kEmptyString) {
    weibo_ = new ::std::string;
  }
  return weibo_;
}
inline ::std::string* ActivityWeibo::release_weibo() {
  clear_has_weibo();
  if (weibo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = weibo_;
    weibo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ActivityWeibo::set_allocated_weibo(::std::string* weibo) {
  if (weibo_ != &::google::protobuf::internal::kEmptyString) {
    delete weibo_;
  }
  if (weibo) {
    set_has_weibo();
    weibo_ = weibo;
  } else {
    clear_has_weibo();
    weibo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ActivityCenterList

// repeated string activities = 1;
inline int ActivityCenterList::activities_size() const {
  return activities_.size();
}
inline void ActivityCenterList::clear_activities() {
  activities_.Clear();
}
inline const ::std::string& ActivityCenterList::activities(int index) const {
  return activities_.Get(index);
}
inline ::std::string* ActivityCenterList::mutable_activities(int index) {
  return activities_.Mutable(index);
}
inline void ActivityCenterList::set_activities(int index, const ::std::string& value) {
  activities_.Mutable(index)->assign(value);
}
inline void ActivityCenterList::set_activities(int index, const char* value) {
  activities_.Mutable(index)->assign(value);
}
inline void ActivityCenterList::set_activities(int index, const char* value, size_t size) {
  activities_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ActivityCenterList::add_activities() {
  return activities_.Add();
}
inline void ActivityCenterList::add_activities(const ::std::string& value) {
  activities_.Add()->assign(value);
}
inline void ActivityCenterList::add_activities(const char* value) {
  activities_.Add()->assign(value);
}
inline void ActivityCenterList::add_activities(const char* value, size_t size) {
  activities_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ActivityCenterList::activities() const {
  return activities_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ActivityCenterList::mutable_activities() {
  return &activities_;
}

// -------------------------------------------------------------------

// ActivityList

// required string sen = 1;
inline bool ActivityList::has_sen() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityList::set_has_sen() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActivityList::clear_has_sen() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActivityList::clear_sen() {
  if (sen_ != &::google::protobuf::internal::kEmptyString) {
    sen_->clear();
  }
  clear_has_sen();
}
inline const ::std::string& ActivityList::sen() const {
  return *sen_;
}
inline void ActivityList::set_sen(const ::std::string& value) {
  set_has_sen();
  if (sen_ == &::google::protobuf::internal::kEmptyString) {
    sen_ = new ::std::string;
  }
  sen_->assign(value);
}
inline void ActivityList::set_sen(const char* value) {
  set_has_sen();
  if (sen_ == &::google::protobuf::internal::kEmptyString) {
    sen_ = new ::std::string;
  }
  sen_->assign(value);
}
inline void ActivityList::set_sen(const char* value, size_t size) {
  set_has_sen();
  if (sen_ == &::google::protobuf::internal::kEmptyString) {
    sen_ = new ::std::string;
  }
  sen_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ActivityList::mutable_sen() {
  set_has_sen();
  if (sen_ == &::google::protobuf::internal::kEmptyString) {
    sen_ = new ::std::string;
  }
  return sen_;
}
inline ::std::string* ActivityList::release_sen() {
  clear_has_sen();
  if (sen_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sen_;
    sen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ActivityList::set_allocated_sen(::std::string* sen) {
  if (sen_ != &::google::protobuf::internal::kEmptyString) {
    delete sen_;
  }
  if (sen) {
    set_has_sen();
    sen_ = sen;
  } else {
    clear_has_sen();
    sen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required double lat = 2;
inline bool ActivityList::has_lat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivityList::set_has_lat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActivityList::clear_has_lat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActivityList::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
inline double ActivityList::lat() const {
  return lat_;
}
inline void ActivityList::set_lat(double value) {
  set_has_lat();
  lat_ = value;
}

// required double lng = 3;
inline bool ActivityList::has_lng() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActivityList::set_has_lng() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActivityList::clear_has_lng() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActivityList::clear_lng() {
  lng_ = 0;
  clear_has_lng();
}
inline double ActivityList::lng() const {
  return lng_;
}
inline void ActivityList::set_lng(double value) {
  set_has_lng();
  lng_ = value;
}

// -------------------------------------------------------------------

// ActivitySearchRequest

// required string name = 1;
inline bool ActivitySearchRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivitySearchRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActivitySearchRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActivitySearchRequest::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ActivitySearchRequest::name() const {
  return *name_;
}
inline void ActivitySearchRequest::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ActivitySearchRequest::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ActivitySearchRequest::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ActivitySearchRequest::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ActivitySearchRequest::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ActivitySearchRequest::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 offset = 2;
inline bool ActivitySearchRequest::has_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivitySearchRequest::set_has_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActivitySearchRequest::clear_has_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActivitySearchRequest::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 ActivitySearchRequest::offset() const {
  return offset_;
}
inline void ActivitySearchRequest::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
}

// optional int32 count = 3;
inline bool ActivitySearchRequest::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActivitySearchRequest::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActivitySearchRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActivitySearchRequest::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 ActivitySearchRequest::count() const {
  return count_;
}
inline void ActivitySearchRequest::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// ActivitySearchResponse

// required int32 total_count = 1;
inline bool ActivitySearchResponse::has_total_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivitySearchResponse::set_has_total_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActivitySearchResponse::clear_has_total_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActivitySearchResponse::clear_total_count() {
  total_count_ = 0;
  clear_has_total_count();
}
inline ::google::protobuf::int32 ActivitySearchResponse::total_count() const {
  return total_count_;
}
inline void ActivitySearchResponse::set_total_count(::google::protobuf::int32 value) {
  set_has_total_count();
  total_count_ = value;
}

// repeated .demoserver.ActivityEntity activities = 2;
inline int ActivitySearchResponse::activities_size() const {
  return activities_.size();
}
inline void ActivitySearchResponse::clear_activities() {
  activities_.Clear();
}
inline const ::demoserver::ActivityEntity& ActivitySearchResponse::activities(int index) const {
  return activities_.Get(index);
}
inline ::demoserver::ActivityEntity* ActivitySearchResponse::mutable_activities(int index) {
  return activities_.Mutable(index);
}
inline ::demoserver::ActivityEntity* ActivitySearchResponse::add_activities() {
  return activities_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::demoserver::ActivityEntity >&
ActivitySearchResponse::activities() const {
  return activities_;
}
inline ::google::protobuf::RepeatedPtrField< ::demoserver::ActivityEntity >*
ActivitySearchResponse::mutable_activities() {
  return &activities_;
}

// repeated .demoserver.ActivitySimilar similars = 3;
inline int ActivitySearchResponse::similars_size() const {
  return similars_.size();
}
inline void ActivitySearchResponse::clear_similars() {
  similars_.Clear();
}
inline const ::demoserver::ActivitySimilar& ActivitySearchResponse::similars(int index) const {
  return similars_.Get(index);
}
inline ::demoserver::ActivitySimilar* ActivitySearchResponse::mutable_similars(int index) {
  return similars_.Mutable(index);
}
inline ::demoserver::ActivitySimilar* ActivitySearchResponse::add_similars() {
  return similars_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::demoserver::ActivitySimilar >&
ActivitySearchResponse::similars() const {
  return similars_;
}
inline ::google::protobuf::RepeatedPtrField< ::demoserver::ActivitySimilar >*
ActivitySearchResponse::mutable_similars() {
  return &similars_;
}

// repeated .demoserver.ActivityCity cities = 4;
inline int ActivitySearchResponse::cities_size() const {
  return cities_.size();
}
inline void ActivitySearchResponse::clear_cities() {
  cities_.Clear();
}
inline const ::demoserver::ActivityCity& ActivitySearchResponse::cities(int index) const {
  return cities_.Get(index);
}
inline ::demoserver::ActivityCity* ActivitySearchResponse::mutable_cities(int index) {
  return cities_.Mutable(index);
}
inline ::demoserver::ActivityCity* ActivitySearchResponse::add_cities() {
  return cities_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::demoserver::ActivityCity >&
ActivitySearchResponse::cities() const {
  return cities_;
}
inline ::google::protobuf::RepeatedPtrField< ::demoserver::ActivityCity >*
ActivitySearchResponse::mutable_cities() {
  return &cities_;
}

// repeated .demoserver.ActivityUser users = 5;
inline int ActivitySearchResponse::users_size() const {
  return users_.size();
}
inline void ActivitySearchResponse::clear_users() {
  users_.Clear();
}
inline const ::demoserver::ActivityUser& ActivitySearchResponse::users(int index) const {
  return users_.Get(index);
}
inline ::demoserver::ActivityUser* ActivitySearchResponse::mutable_users(int index) {
  return users_.Mutable(index);
}
inline ::demoserver::ActivityUser* ActivitySearchResponse::add_users() {
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::demoserver::ActivityUser >&
ActivitySearchResponse::users() const {
  return users_;
}
inline ::google::protobuf::RepeatedPtrField< ::demoserver::ActivityUser >*
ActivitySearchResponse::mutable_users() {
  return &users_;
}

// repeated .demoserver.ActivityWeibo weibos = 6;
inline int ActivitySearchResponse::weibos_size() const {
  return weibos_.size();
}
inline void ActivitySearchResponse::clear_weibos() {
  weibos_.Clear();
}
inline const ::demoserver::ActivityWeibo& ActivitySearchResponse::weibos(int index) const {
  return weibos_.Get(index);
}
inline ::demoserver::ActivityWeibo* ActivitySearchResponse::mutable_weibos(int index) {
  return weibos_.Mutable(index);
}
inline ::demoserver::ActivityWeibo* ActivitySearchResponse::add_weibos() {
  return weibos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::demoserver::ActivityWeibo >&
ActivitySearchResponse::weibos() const {
  return weibos_;
}
inline ::google::protobuf::RepeatedPtrField< ::demoserver::ActivityWeibo >*
ActivitySearchResponse::mutable_weibos() {
  return &weibos_;
}

// repeated .demoserver.ActivityCenterList lists = 7;
inline int ActivitySearchResponse::lists_size() const {
  return lists_.size();
}
inline void ActivitySearchResponse::clear_lists() {
  lists_.Clear();
}
inline const ::demoserver::ActivityCenterList& ActivitySearchResponse::lists(int index) const {
  return lists_.Get(index);
}
inline ::demoserver::ActivityCenterList* ActivitySearchResponse::mutable_lists(int index) {
  return lists_.Mutable(index);
}
inline ::demoserver::ActivityCenterList* ActivitySearchResponse::add_lists() {
  return lists_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::demoserver::ActivityCenterList >&
ActivitySearchResponse::lists() const {
  return lists_;
}
inline ::google::protobuf::RepeatedPtrField< ::demoserver::ActivityCenterList >*
ActivitySearchResponse::mutable_lists() {
  return &lists_;
}

// repeated .demoserver.ActivityList actlists = 8;
inline int ActivitySearchResponse::actlists_size() const {
  return actlists_.size();
}
inline void ActivitySearchResponse::clear_actlists() {
  actlists_.Clear();
}
inline const ::demoserver::ActivityList& ActivitySearchResponse::actlists(int index) const {
  return actlists_.Get(index);
}
inline ::demoserver::ActivityList* ActivitySearchResponse::mutable_actlists(int index) {
  return actlists_.Mutable(index);
}
inline ::demoserver::ActivityList* ActivitySearchResponse::add_actlists() {
  return actlists_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::demoserver::ActivityList >&
ActivitySearchResponse::actlists() const {
  return actlists_;
}
inline ::google::protobuf::RepeatedPtrField< ::demoserver::ActivityList >*
ActivitySearchResponse::mutable_actlists() {
  return &actlists_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace demoserver

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_interface_2eproto__INCLUDED
